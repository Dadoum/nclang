// This source file is generated by nclang PInvokeGenerator.
using System;
using System.Runtime.InteropServices;
using time_t = System.IntPtr;
using size_t = System.IntPtr;
using CXVirtualFileOverlay = NClang.Natives.Pointer<NClang.Natives.CXVirtualFileOverlayImpl>;
using CXModuleMapDescriptor = NClang.Natives.Pointer<NClang.Natives.CXModuleMapDescriptorImpl>;
using CXCompilationDatabase = System.IntPtr;
using CXCompileCommands = System.IntPtr;
using CXCompileCommand = System.IntPtr;
using CXIndex = System.IntPtr;
using CXTargetInfo = NClang.Natives.Pointer<NClang.Natives.CXTargetInfoImpl>;
using CXTranslationUnit = NClang.Natives.Pointer<NClang.Natives.CXTranslationUnitImpl>;
using CXClientData = System.IntPtr;
using CXFile = System.IntPtr;
using CXDiagnostic = System.IntPtr;
using CXDiagnosticSet = System.IntPtr;
using CXCursorSet = NClang.Natives.Pointer<NClang.Natives.CXCursorSetImpl>;
using delegate0 = NClang.Natives.Delegates.CXCursorVisitor; // Index.h (3983,35)
using CXPrintingPolicy = System.IntPtr;
using CXModule = System.IntPtr;
using CXCompletionString = System.IntPtr;
using delegate2 = NClang.Natives.Delegates.CXInclusionVisitor; // Index.h (5715,16)
using CXEvalResult = System.IntPtr;
using CXRemapping = System.IntPtr;
using CXIdxClientFile = System.IntPtr;
using CXIdxClientEntity = System.IntPtr;
using CXIdxClientContainer = System.IntPtr;
using CXIdxClientASTFile = System.IntPtr;
using CXIndexAction = System.IntPtr;
using delegate12 = NClang.Natives.Delegates.CXFieldVisitor; // Index.h (6547,32)
using CXCursorVisitor = NClang.Natives.Delegates.CXCursorVisitor;
using delegate1 = NClang.Natives.Delegates.delegate1;
using CXInclusionVisitor = NClang.Natives.Delegates.CXInclusionVisitor;
using delegate3 = NClang.Natives.Delegates.delegate3;
using delegate4 = NClang.Natives.Delegates.delegate4;
using delegate5 = NClang.Natives.Delegates.delegate5;
using delegate6 = NClang.Natives.Delegates.delegate6;
using delegate7 = NClang.Natives.Delegates.delegate7;
using delegate8 = NClang.Natives.Delegates.delegate8;
using delegate9 = NClang.Natives.Delegates.delegate9;
using delegate10 = NClang.Natives.Delegates.delegate10;
using delegate11 = NClang.Natives.Delegates.delegate11;
using CXFieldVisitor = NClang.Natives.Delegates.CXFieldVisitor;
using delegate13 = NClang.Natives.Delegates.delegate13;
using delegate14 = NClang.Natives.Delegates.delegate14;
using delegate15 = NClang.Natives.Delegates.delegate15;
using delegate16 = NClang.Natives.Delegates.delegate16;
using delegate17 = NClang.Natives.Delegates.delegate17;
using delegate18 = NClang.Natives.Delegates.delegate18;
using delegate19 = NClang.Natives.Delegates.delegate19;
using delegate20 = NClang.Natives.Delegates.delegate20;
using delegate21 = NClang.Natives.Delegates.delegate21;
using delegate22 = NClang.Natives.Delegates.delegate22;

namespace NClang.Natives {
internal enum CXCompilationDatabase_Error // CXCompilationDatabase.h (59, 9)
{
	CXCompilationDatabase_NoError  = 0,
	CXCompilationDatabase_CanNotLoadDatabase  = 1,
}

[StructLayout (LayoutKind.Sequential)]
internal struct CXComment // Documentation.h (37, 9)
{
	[CTypeDetails ("Pointer<void>")]internal System.IntPtr @ASTNode;
	internal CXTranslationUnit @TranslationUnit;
}

internal enum CXCommentKind // Documentation.h (54, 6)
{
	CXComment_Null  = 0,
	CXComment_Text  = 1,
	CXComment_InlineCommand  = 2,
	CXComment_HTMLStartTag  = 3,
	CXComment_HTMLEndTag  = 4,
	CXComment_Paragraph  = 5,
	CXComment_BlockCommand  = 6,
	CXComment_ParamCommand  = 7,
	CXComment_TParamCommand  = 8,
	CXComment_VerbatimBlockCommand  = 9,
	CXComment_VerbatimBlockLine  = 10,
	CXComment_VerbatimLine  = 11,
	CXComment_FullComment  = 12,
}

internal enum CXCommentInlineCommandRenderKind // Documentation.h (165, 6)
{
	CXCommentInlineCommandRenderKind_Normal  = 0,
	CXCommentInlineCommandRenderKind_Bold  = 1,
	CXCommentInlineCommandRenderKind_Monospaced  = 2,
	CXCommentInlineCommandRenderKind_Emphasized  = 3,
}

internal enum CXCommentParamPassDirection // Documentation.h (191, 6)
{
	CXCommentParamPassDirection_In  = 0,
	CXCommentParamPassDirection_Out  = 1,
	CXCommentParamPassDirection_InOut  = 2,
}

internal enum CXErrorCode // CXErrorCode.h (29, 6)
{
	CXError_Success  = 0,
	CXError_Failure  = 1,
	CXError_Crashed  = 2,
	CXError_InvalidArguments  = 3,
	CXError_ASTReadError  = 4,
}

[StructLayout (LayoutKind.Sequential)]
internal partial struct CXString // CXString.h (38, 9)
{
	[CTypeDetails ("Pointer<void>")]internal System.IntPtr @data;
	internal uint @private_flags;
}

[StructLayout (LayoutKind.Sequential)]
internal struct CXStringSet // CXString.h (43, 9)
{
	[CTypeDetails ("Pointer<CXString>")]internal Pointer<CXString> @Strings;
	internal uint @Count;
}

[StructLayout (LayoutKind.Sequential)]
internal struct CXVirtualFileOverlayImpl // BuildSystem.h (40, 16)
{
}

[StructLayout (LayoutKind.Sequential)]
internal struct CXModuleMapDescriptorImpl // BuildSystem.h (101, 16)
{
}

[StructLayout (LayoutKind.Sequential)]
internal struct CXTargetInfoImpl // Index.h (87, 16)
{
}

[StructLayout (LayoutKind.Sequential)]
internal struct CXTranslationUnitImpl // Index.h (92, 16)
{
}

[StructLayout (LayoutKind.Sequential)]
internal struct CXUnsavedFile // Index.h (107, 8)
{
	[CTypeDetails ("Pointer<byte>")]internal string @Filename;
	[CTypeDetails ("Pointer<byte>")]internal string @Contents;
	internal ulong @Length;
}

internal enum CXAvailabilityKind // Index.h (131, 6)
{
	CXAvailability_Available  = 0,
	CXAvailability_Deprecated  = 1,
	CXAvailability_NotAvailable  = 2,
	CXAvailability_NotAccessible  = 3,
}

[StructLayout (LayoutKind.Sequential)]
internal struct CXVersion // Index.h (155, 16)
{
	internal int @Major;
	internal int @Minor;
	internal int @Subminor;
}

internal enum CXCursor_ExceptionSpecificationKind // Index.h (180, 6)
{
	CXCursor_ExceptionSpecificationKind_None  = 0,
	CXCursor_ExceptionSpecificationKind_DynamicNone  = 1,
	CXCursor_ExceptionSpecificationKind_Dynamic  = 2,
	CXCursor_ExceptionSpecificationKind_MSAny  = 3,
	CXCursor_ExceptionSpecificationKind_BasicNoexcept  = 4,
	CXCursor_ExceptionSpecificationKind_ComputedNoexcept  = 5,
	CXCursor_ExceptionSpecificationKind_Unevaluated  = 6,
	CXCursor_ExceptionSpecificationKind_Uninstantiated  = 7,
	CXCursor_ExceptionSpecificationKind_Unparsed  = 8,
}

internal enum CXGlobalOptFlags // Index.h (279, 9)
{
	CXGlobalOpt_None  = 0,
	CXGlobalOpt_ThreadBackgroundPriorityForIndexing  = 1,
	CXGlobalOpt_ThreadBackgroundPriorityForEditing  = 2,
	CXGlobalOpt_ThreadBackgroundPriorityForAll  = 3,
}

[StructLayout (LayoutKind.Sequential)]
internal struct CXFileUniqueID // Index.h (371, 9)
{
	[MarshalAs (UnmanagedType.ByValArray, SizeConst=3)]
	[CTypeDetails ("ConstArrayOf<ulong>")] internal ulong[] @data;
}

[StructLayout (LayoutKind.Sequential)]
internal struct CXSourceLocation // Index.h (458, 9)
{
	[MarshalAs (UnmanagedType.ByValArray, SizeConst=2)]
	[CTypeDetails ("ConstArrayOf<System.IntPtr>")] internal System.IntPtr[] @ptr_data;
	internal uint @int_data;
}

[StructLayout (LayoutKind.Sequential)]
internal struct CXSourceRange // Index.h (469, 9)
{
	[MarshalAs (UnmanagedType.ByValArray, SizeConst=2)]
	[CTypeDetails ("ConstArrayOf<System.IntPtr>")] internal System.IntPtr[] @ptr_data;
	internal uint @begin_int_data;
	internal uint @end_int_data;
}

[StructLayout (LayoutKind.Sequential)]
internal struct CXSourceRangeList // Index.h (702, 9)
{
	internal uint @count;
	[CTypeDetails ("Pointer<CXSourceRange>")]internal Pointer<CXSourceRange> @ranges;
}

internal enum CXDiagnosticSeverity // Index.h (747, 6)
{
	CXDiagnostic_Ignored  = 0,
	CXDiagnostic_Note  = 1,
	CXDiagnostic_Warning  = 2,
	CXDiagnostic_Error  = 3,
	CXDiagnostic_Fatal  = 4,
}

internal enum CXLoadDiag_Error // Index.h (811, 6)
{
	CXLoadDiag_None  = 0,
	CXLoadDiag_Unknown  = 1,
	CXLoadDiag_CannotLoad  = 2,
	CXLoadDiag_InvalidFile  = 3,
}

internal enum CXDiagnosticDisplayOptions // Index.h (904, 6)
{
	CXDiagnostic_DisplaySourceLocation  = 1,
	CXDiagnostic_DisplayColumn  = 2,
	CXDiagnostic_DisplaySourceRanges  = 4,
	CXDiagnostic_DisplayOption  = 8,
	CXDiagnostic_DisplayCategoryId  = 16,
	CXDiagnostic_DisplayCategoryName  = 32,
}

internal enum CXTranslationUnit_Flags // Index.h (1214, 6)
{
	CXTranslationUnit_None  = 0,
	CXTranslationUnit_DetailedPreprocessingRecord  = 1,
	CXTranslationUnit_Incomplete  = 2,
	CXTranslationUnit_PrecompiledPreamble  = 4,
	CXTranslationUnit_CacheCompletionResults  = 8,
	CXTranslationUnit_ForSerialization  = 16,
	CXTranslationUnit_CXXChainedPCH  = 32,
	CXTranslationUnit_SkipFunctionBodies  = 64,
	CXTranslationUnit_IncludeBriefCommentsInCodeCompletion  = 128,
	CXTranslationUnit_CreatePreambleOnFirstParse  = 256,
	CXTranslationUnit_KeepGoing  = 512,
	CXTranslationUnit_SingleFileParse  = 1024,
	CXTranslationUnit_LimitSkipFunctionBodiesToPreamble  = 2048,
}

internal enum CXSaveTranslationUnit_Flags // Index.h (1439, 6)
{
	CXSaveTranslationUnit_None  = 0,
}

internal enum CXSaveError // Index.h (1461, 6)
{
	CXSaveError_None  = 0,
	CXSaveError_Unknown  = 1,
	CXSaveError_TranslationErrors  = 2,
	CXSaveError_InvalidTU  = 3,
}

internal enum CXReparse_Flags // Index.h (1540, 6)
{
	CXReparse_None  = 0,
}

internal enum CXTUResourceUsageKind // Index.h (1606, 6)
{
	CXTUResourceUsage_AST  = 1,
	CXTUResourceUsage_Identifiers  = 2,
	CXTUResourceUsage_Selectors  = 3,
	CXTUResourceUsage_GlobalCompletionResults  = 4,
	CXTUResourceUsage_SourceManagerContentCache  = 5,
	CXTUResourceUsage_AST_SideTables  = 6,
	CXTUResourceUsage_SourceManager_Membuffer_Malloc  = 7,
	CXTUResourceUsage_SourceManager_Membuffer_MMap  = 8,
	CXTUResourceUsage_ExternalASTSource_Membuffer_Malloc  = 9,
	CXTUResourceUsage_ExternalASTSource_Membuffer_MMap  = 10,
	CXTUResourceUsage_Preprocessor  = 11,
	CXTUResourceUsage_PreprocessingRecord  = 12,
	CXTUResourceUsage_SourceManager_DataStructures  = 13,
	CXTUResourceUsage_Preprocessor_HeaderSearch  = 14,
	CXTUResourceUsage_MEMORY_IN_BYTES_BEGIN  = 1,
	CXTUResourceUsage_MEMORY_IN_BYTES_END  = 14,
	CXTUResourceUsage_First  = 1,
	CXTUResourceUsage_Last  = 14,
}

[StructLayout (LayoutKind.Sequential)]
internal struct CXTUResourceUsageEntry // Index.h (1636, 16)
{
	internal CXTUResourceUsageKind @kind;
	internal ulong @amount;
}

[StructLayout (LayoutKind.Sequential)]
internal struct CXTUResourceUsage // Index.h (1647, 16)
{
	[CTypeDetails ("Pointer<void>")]internal System.IntPtr @data;
	internal uint @numEntries;
	[CTypeDetails ("Pointer<CXTUResourceUsageEntry>")]internal Pointer<CXTUResourceUsageEntry> @entries;
}

internal enum CXCursorKind // Index.h (1705, 6)
{
	CXCursor_UnexposedDecl  = 1,
	CXCursor_StructDecl  = 2,
	CXCursor_UnionDecl  = 3,
	CXCursor_ClassDecl  = 4,
	CXCursor_EnumDecl  = 5,
	CXCursor_FieldDecl  = 6,
	CXCursor_EnumConstantDecl  = 7,
	CXCursor_FunctionDecl  = 8,
	CXCursor_VarDecl  = 9,
	CXCursor_ParmDecl  = 10,
	CXCursor_ObjCInterfaceDecl  = 11,
	CXCursor_ObjCCategoryDecl  = 12,
	CXCursor_ObjCProtocolDecl  = 13,
	CXCursor_ObjCPropertyDecl  = 14,
	CXCursor_ObjCIvarDecl  = 15,
	CXCursor_ObjCInstanceMethodDecl  = 16,
	CXCursor_ObjCClassMethodDecl  = 17,
	CXCursor_ObjCImplementationDecl  = 18,
	CXCursor_ObjCCategoryImplDecl  = 19,
	CXCursor_TypedefDecl  = 20,
	CXCursor_CXXMethod  = 21,
	CXCursor_Namespace  = 22,
	CXCursor_LinkageSpec  = 23,
	CXCursor_Constructor  = 24,
	CXCursor_Destructor  = 25,
	CXCursor_ConversionFunction  = 26,
	CXCursor_TemplateTypeParameter  = 27,
	CXCursor_NonTypeTemplateParameter  = 28,
	CXCursor_TemplateTemplateParameter  = 29,
	CXCursor_FunctionTemplate  = 30,
	CXCursor_ClassTemplate  = 31,
	CXCursor_ClassTemplatePartialSpecialization  = 32,
	CXCursor_NamespaceAlias  = 33,
	CXCursor_UsingDirective  = 34,
	CXCursor_UsingDeclaration  = 35,
	CXCursor_TypeAliasDecl  = 36,
	CXCursor_ObjCSynthesizeDecl  = 37,
	CXCursor_ObjCDynamicDecl  = 38,
	CXCursor_CXXAccessSpecifier  = 39,
	CXCursor_FirstDecl  = 1,
	CXCursor_LastDecl  = 39,
	CXCursor_FirstRef  = 40,
	CXCursor_ObjCSuperClassRef  = 40,
	CXCursor_ObjCProtocolRef  = 41,
	CXCursor_ObjCClassRef  = 42,
	CXCursor_TypeRef  = 43,
	CXCursor_CXXBaseSpecifier  = 44,
	CXCursor_TemplateRef  = 45,
	CXCursor_NamespaceRef  = 46,
	CXCursor_MemberRef  = 47,
	CXCursor_LabelRef  = 48,
	CXCursor_OverloadedDeclRef  = 49,
	CXCursor_VariableRef  = 50,
	CXCursor_LastRef  = 50,
	CXCursor_FirstInvalid  = 70,
	CXCursor_InvalidFile  = 70,
	CXCursor_NoDeclFound  = 71,
	CXCursor_NotImplemented  = 72,
	CXCursor_InvalidCode  = 73,
	CXCursor_LastInvalid  = 73,
	CXCursor_FirstExpr  = 100,
	CXCursor_UnexposedExpr  = 100,
	CXCursor_DeclRefExpr  = 101,
	CXCursor_MemberRefExpr  = 102,
	CXCursor_CallExpr  = 103,
	CXCursor_ObjCMessageExpr  = 104,
	CXCursor_BlockExpr  = 105,
	CXCursor_IntegerLiteral  = 106,
	CXCursor_FloatingLiteral  = 107,
	CXCursor_ImaginaryLiteral  = 108,
	CXCursor_StringLiteral  = 109,
	CXCursor_CharacterLiteral  = 110,
	CXCursor_ParenExpr  = 111,
	CXCursor_UnaryOperator  = 112,
	CXCursor_ArraySubscriptExpr  = 113,
	CXCursor_BinaryOperator  = 114,
	CXCursor_CompoundAssignOperator  = 115,
	CXCursor_ConditionalOperator  = 116,
	CXCursor_CStyleCastExpr  = 117,
	CXCursor_CompoundLiteralExpr  = 118,
	CXCursor_InitListExpr  = 119,
	CXCursor_AddrLabelExpr  = 120,
	CXCursor_StmtExpr  = 121,
	CXCursor_GenericSelectionExpr  = 122,
	CXCursor_GNUNullExpr  = 123,
	CXCursor_CXXStaticCastExpr  = 124,
	CXCursor_CXXDynamicCastExpr  = 125,
	CXCursor_CXXReinterpretCastExpr  = 126,
	CXCursor_CXXConstCastExpr  = 127,
	CXCursor_CXXFunctionalCastExpr  = 128,
	CXCursor_CXXTypeidExpr  = 129,
	CXCursor_CXXBoolLiteralExpr  = 130,
	CXCursor_CXXNullPtrLiteralExpr  = 131,
	CXCursor_CXXThisExpr  = 132,
	CXCursor_CXXThrowExpr  = 133,
	CXCursor_CXXNewExpr  = 134,
	CXCursor_CXXDeleteExpr  = 135,
	CXCursor_UnaryExpr  = 136,
	CXCursor_ObjCStringLiteral  = 137,
	CXCursor_ObjCEncodeExpr  = 138,
	CXCursor_ObjCSelectorExpr  = 139,
	CXCursor_ObjCProtocolExpr  = 140,
	CXCursor_ObjCBridgedCastExpr  = 141,
	CXCursor_PackExpansionExpr  = 142,
	CXCursor_SizeOfPackExpr  = 143,
	CXCursor_LambdaExpr  = 144,
	CXCursor_ObjCBoolLiteralExpr  = 145,
	CXCursor_ObjCSelfExpr  = 146,
	CXCursor_OMPArraySectionExpr  = 147,
	CXCursor_ObjCAvailabilityCheckExpr  = 148,
	CXCursor_FixedPointLiteral  = 149,
	CXCursor_LastExpr  = 149,
	CXCursor_FirstStmt  = 200,
	CXCursor_UnexposedStmt  = 200,
	CXCursor_LabelStmt  = 201,
	CXCursor_CompoundStmt  = 202,
	CXCursor_CaseStmt  = 203,
	CXCursor_DefaultStmt  = 204,
	CXCursor_IfStmt  = 205,
	CXCursor_SwitchStmt  = 206,
	CXCursor_WhileStmt  = 207,
	CXCursor_DoStmt  = 208,
	CXCursor_ForStmt  = 209,
	CXCursor_GotoStmt  = 210,
	CXCursor_IndirectGotoStmt  = 211,
	CXCursor_ContinueStmt  = 212,
	CXCursor_BreakStmt  = 213,
	CXCursor_ReturnStmt  = 214,
	CXCursor_GCCAsmStmt  = 215,
	CXCursor_AsmStmt  = 215,
	CXCursor_ObjCAtTryStmt  = 216,
	CXCursor_ObjCAtCatchStmt  = 217,
	CXCursor_ObjCAtFinallyStmt  = 218,
	CXCursor_ObjCAtThrowStmt  = 219,
	CXCursor_ObjCAtSynchronizedStmt  = 220,
	CXCursor_ObjCAutoreleasePoolStmt  = 221,
	CXCursor_ObjCForCollectionStmt  = 222,
	CXCursor_CXXCatchStmt  = 223,
	CXCursor_CXXTryStmt  = 224,
	CXCursor_CXXForRangeStmt  = 225,
	CXCursor_SEHTryStmt  = 226,
	CXCursor_SEHExceptStmt  = 227,
	CXCursor_SEHFinallyStmt  = 228,
	CXCursor_MSAsmStmt  = 229,
	CXCursor_NullStmt  = 230,
	CXCursor_DeclStmt  = 231,
	CXCursor_OMPParallelDirective  = 232,
	CXCursor_OMPSimdDirective  = 233,
	CXCursor_OMPForDirective  = 234,
	CXCursor_OMPSectionsDirective  = 235,
	CXCursor_OMPSectionDirective  = 236,
	CXCursor_OMPSingleDirective  = 237,
	CXCursor_OMPParallelForDirective  = 238,
	CXCursor_OMPParallelSectionsDirective  = 239,
	CXCursor_OMPTaskDirective  = 240,
	CXCursor_OMPMasterDirective  = 241,
	CXCursor_OMPCriticalDirective  = 242,
	CXCursor_OMPTaskyieldDirective  = 243,
	CXCursor_OMPBarrierDirective  = 244,
	CXCursor_OMPTaskwaitDirective  = 245,
	CXCursor_OMPFlushDirective  = 246,
	CXCursor_SEHLeaveStmt  = 247,
	CXCursor_OMPOrderedDirective  = 248,
	CXCursor_OMPAtomicDirective  = 249,
	CXCursor_OMPForSimdDirective  = 250,
	CXCursor_OMPParallelForSimdDirective  = 251,
	CXCursor_OMPTargetDirective  = 252,
	CXCursor_OMPTeamsDirective  = 253,
	CXCursor_OMPTaskgroupDirective  = 254,
	CXCursor_OMPCancellationPointDirective  = 255,
	CXCursor_OMPCancelDirective  = 256,
	CXCursor_OMPTargetDataDirective  = 257,
	CXCursor_OMPTaskLoopDirective  = 258,
	CXCursor_OMPTaskLoopSimdDirective  = 259,
	CXCursor_OMPDistributeDirective  = 260,
	CXCursor_OMPTargetEnterDataDirective  = 261,
	CXCursor_OMPTargetExitDataDirective  = 262,
	CXCursor_OMPTargetParallelDirective  = 263,
	CXCursor_OMPTargetParallelForDirective  = 264,
	CXCursor_OMPTargetUpdateDirective  = 265,
	CXCursor_OMPDistributeParallelForDirective  = 266,
	CXCursor_OMPDistributeParallelForSimdDirective  = 267,
	CXCursor_OMPDistributeSimdDirective  = 268,
	CXCursor_OMPTargetParallelForSimdDirective  = 269,
	CXCursor_OMPTargetSimdDirective  = 270,
	CXCursor_OMPTeamsDistributeDirective  = 271,
	CXCursor_OMPTeamsDistributeSimdDirective  = 272,
	CXCursor_OMPTeamsDistributeParallelForSimdDirective  = 273,
	CXCursor_OMPTeamsDistributeParallelForDirective  = 274,
	CXCursor_OMPTargetTeamsDirective  = 275,
	CXCursor_OMPTargetTeamsDistributeDirective  = 276,
	CXCursor_OMPTargetTeamsDistributeParallelForDirective  = 277,
	CXCursor_OMPTargetTeamsDistributeParallelForSimdDirective  = 278,
	CXCursor_OMPTargetTeamsDistributeSimdDirective  = 279,
	CXCursor_LastStmt  = 279,
	CXCursor_TranslationUnit  = 300,
	CXCursor_FirstAttr  = 400,
	CXCursor_UnexposedAttr  = 400,
	CXCursor_IBActionAttr  = 401,
	CXCursor_IBOutletAttr  = 402,
	CXCursor_IBOutletCollectionAttr  = 403,
	CXCursor_CXXFinalAttr  = 404,
	CXCursor_CXXOverrideAttr  = 405,
	CXCursor_AnnotateAttr  = 406,
	CXCursor_AsmLabelAttr  = 407,
	CXCursor_PackedAttr  = 408,
	CXCursor_PureAttr  = 409,
	CXCursor_ConstAttr  = 410,
	CXCursor_NoDuplicateAttr  = 411,
	CXCursor_CUDAConstantAttr  = 412,
	CXCursor_CUDADeviceAttr  = 413,
	CXCursor_CUDAGlobalAttr  = 414,
	CXCursor_CUDAHostAttr  = 415,
	CXCursor_CUDASharedAttr  = 416,
	CXCursor_VisibilityAttr  = 417,
	CXCursor_DLLExport  = 418,
	CXCursor_DLLImport  = 419,
	CXCursor_LastAttr  = 419,
	CXCursor_PreprocessingDirective  = 500,
	CXCursor_MacroDefinition  = 501,
	CXCursor_MacroExpansion  = 502,
	CXCursor_MacroInstantiation  = 502,
	CXCursor_InclusionDirective  = 503,
	CXCursor_FirstPreprocessing  = 500,
	CXCursor_LastPreprocessing  = 503,
	CXCursor_ModuleImportDecl  = 600,
	CXCursor_TypeAliasTemplateDecl  = 601,
	CXCursor_StaticAssert  = 602,
	CXCursor_FriendDecl  = 603,
	CXCursor_FirstExtraDecl  = 600,
	CXCursor_LastExtraDecl  = 603,
	CXCursor_OverloadCandidate  = 700,
}

[StructLayout (LayoutKind.Sequential)]
internal struct CXCursor // Index.h (2614, 9)
{
	internal CXCursorKind @kind;
	internal int @xdata;
	[MarshalAs (UnmanagedType.ByValArray, SizeConst=3)]
	[CTypeDetails ("ConstArrayOf<System.IntPtr>")] internal System.IntPtr[] @data;
}

internal enum CXLinkageKind // Index.h (2731, 6)
{
	CXLinkage_Invalid  = 0,
	CXLinkage_NoLinkage  = 1,
	CXLinkage_Internal  = 2,
	CXLinkage_UniqueExternal  = 3,
	CXLinkage_External  = 4,
}

internal enum CXVisibilityKind // Index.h (2754, 6)
{
	CXVisibility_Invalid  = 0,
	CXVisibility_Hidden  = 1,
	CXVisibility_Protected  = 2,
	CXVisibility_Default  = 3,
}

[StructLayout (LayoutKind.Sequential)]
internal struct CXPlatformAvailability // Index.h (2795, 16)
{
	internal CXString @Platform;
	internal CXVersion @Introduced;
	internal CXVersion @Deprecated;
	internal CXVersion @Obsoleted;
	internal int @Unavailable;
	internal CXString @Message;
}

internal enum CXLanguageKind // Index.h (2882, 6)
{
	CXLanguage_Invalid  = 0,
	CXLanguage_C  = 1,
	CXLanguage_ObjC  = 2,
	CXLanguage_CPlusPlus  = 3,
}

internal enum CXTLSKind // Index.h (2898, 6)
{
	CXTLS_None  = 0,
	CXTLS_Dynamic  = 1,
	CXTLS_Static  = 2,
}

[StructLayout (LayoutKind.Sequential)]
internal struct CXCursorSetImpl // Index.h (2918, 16)
{
}

internal enum CXTypeKind // Index.h (3146, 6)
{
	CXType_Invalid  = 0,
	CXType_Unexposed  = 1,
	CXType_Void  = 2,
	CXType_Bool  = 3,
	CXType_Char_U  = 4,
	CXType_UChar  = 5,
	CXType_Char16  = 6,
	CXType_Char32  = 7,
	CXType_UShort  = 8,
	CXType_UInt  = 9,
	CXType_ULong  = 10,
	CXType_ULongLong  = 11,
	CXType_UInt128  = 12,
	CXType_Char_S  = 13,
	CXType_SChar  = 14,
	CXType_WChar  = 15,
	CXType_Short  = 16,
	CXType_Int  = 17,
	CXType_Long  = 18,
	CXType_LongLong  = 19,
	CXType_Int128  = 20,
	CXType_Float  = 21,
	CXType_Double  = 22,
	CXType_LongDouble  = 23,
	CXType_NullPtr  = 24,
	CXType_Overload  = 25,
	CXType_Dependent  = 26,
	CXType_ObjCId  = 27,
	CXType_ObjCClass  = 28,
	CXType_ObjCSel  = 29,
	CXType_Float128  = 30,
	CXType_Half  = 31,
	CXType_Float16  = 32,
	CXType_ShortAccum  = 33,
	CXType_Accum  = 34,
	CXType_LongAccum  = 35,
	CXType_UShortAccum  = 36,
	CXType_UAccum  = 37,
	CXType_ULongAccum  = 38,
	CXType_FirstBuiltin  = 2,
	CXType_LastBuiltin  = 38,
	CXType_Complex  = 100,
	CXType_Pointer  = 101,
	CXType_BlockPointer  = 102,
	CXType_LValueReference  = 103,
	CXType_RValueReference  = 104,
	CXType_Record  = 105,
	CXType_Enum  = 106,
	CXType_Typedef  = 107,
	CXType_ObjCInterface  = 108,
	CXType_ObjCObjectPointer  = 109,
	CXType_FunctionNoProto  = 110,
	CXType_FunctionProto  = 111,
	CXType_ConstantArray  = 112,
	CXType_Vector  = 113,
	CXType_IncompleteArray  = 114,
	CXType_VariableArray  = 115,
	CXType_DependentSizedArray  = 116,
	CXType_MemberPointer  = 117,
	CXType_Auto  = 118,
	CXType_Elaborated  = 119,
	CXType_Pipe  = 120,
	CXType_OCLImage1dRO  = 121,
	CXType_OCLImage1dArrayRO  = 122,
	CXType_OCLImage1dBufferRO  = 123,
	CXType_OCLImage2dRO  = 124,
	CXType_OCLImage2dArrayRO  = 125,
	CXType_OCLImage2dDepthRO  = 126,
	CXType_OCLImage2dArrayDepthRO  = 127,
	CXType_OCLImage2dMSAARO  = 128,
	CXType_OCLImage2dArrayMSAARO  = 129,
	CXType_OCLImage2dMSAADepthRO  = 130,
	CXType_OCLImage2dArrayMSAADepthRO  = 131,
	CXType_OCLImage3dRO  = 132,
	CXType_OCLImage1dWO  = 133,
	CXType_OCLImage1dArrayWO  = 134,
	CXType_OCLImage1dBufferWO  = 135,
	CXType_OCLImage2dWO  = 136,
	CXType_OCLImage2dArrayWO  = 137,
	CXType_OCLImage2dDepthWO  = 138,
	CXType_OCLImage2dArrayDepthWO  = 139,
	CXType_OCLImage2dMSAAWO  = 140,
	CXType_OCLImage2dArrayMSAAWO  = 141,
	CXType_OCLImage2dMSAADepthWO  = 142,
	CXType_OCLImage2dArrayMSAADepthWO  = 143,
	CXType_OCLImage3dWO  = 144,
	CXType_OCLImage1dRW  = 145,
	CXType_OCLImage1dArrayRW  = 146,
	CXType_OCLImage1dBufferRW  = 147,
	CXType_OCLImage2dRW  = 148,
	CXType_OCLImage2dArrayRW  = 149,
	CXType_OCLImage2dDepthRW  = 150,
	CXType_OCLImage2dArrayDepthRW  = 151,
	CXType_OCLImage2dMSAARW  = 152,
	CXType_OCLImage2dArrayMSAARW  = 153,
	CXType_OCLImage2dMSAADepthRW  = 154,
	CXType_OCLImage2dArrayMSAADepthRW  = 155,
	CXType_OCLImage3dRW  = 156,
	CXType_OCLSampler  = 157,
	CXType_OCLEvent  = 158,
	CXType_OCLQueue  = 159,
	CXType_OCLReserveID  = 160,
}

internal enum CXCallingConv // Index.h (3275, 6)
{
	CXCallingConv_Default  = 0,
	CXCallingConv_C  = 1,
	CXCallingConv_X86StdCall  = 2,
	CXCallingConv_X86FastCall  = 3,
	CXCallingConv_X86ThisCall  = 4,
	CXCallingConv_X86Pascal  = 5,
	CXCallingConv_AAPCS  = 6,
	CXCallingConv_AAPCS_VFP  = 7,
	CXCallingConv_X86RegCall  = 8,
	CXCallingConv_IntelOclBicc  = 9,
	CXCallingConv_Win64  = 10,
	CXCallingConv_X86_64Win64  = 10,
	CXCallingConv_X86_64SysV  = 11,
	CXCallingConv_X86VectorCall  = 12,
	CXCallingConv_Swift  = 13,
	CXCallingConv_PreserveMost  = 14,
	CXCallingConv_PreserveAll  = 15,
	CXCallingConv_Invalid  = 100,
	CXCallingConv_Unexposed  = 200,
}

[StructLayout (LayoutKind.Sequential)]
internal struct CXType // Index.h (3303, 9)
{
	internal CXTypeKind @kind;
	[MarshalAs (UnmanagedType.ByValArray, SizeConst=2)]
	[CTypeDetails ("ConstArrayOf<System.IntPtr>")] internal System.IntPtr[] @data;
}

internal enum CXTemplateArgumentKind // Index.h (3388, 6)
{
	CXTemplateArgumentKind_Null  = 0,
	CXTemplateArgumentKind_Type  = 1,
	CXTemplateArgumentKind_Declaration  = 2,
	CXTemplateArgumentKind_NullPtr  = 3,
	CXTemplateArgumentKind_Integral  = 4,
	CXTemplateArgumentKind_Template  = 5,
	CXTemplateArgumentKind_TemplateExpansion  = 6,
	CXTemplateArgumentKind_Expression  = 7,
	CXTemplateArgumentKind_Pack  = 8,
	CXTemplateArgumentKind_Invalid  = 9,
}

internal enum CXTypeLayoutError // Index.h (3711, 6)
{
	CXTypeLayoutError_Invalid  = -1,
	CXTypeLayoutError_Incomplete  = -2,
	CXTypeLayoutError_Dependent  = -3,
	CXTypeLayoutError_NotConstantSize  = -4,
	CXTypeLayoutError_InvalidFieldName  = -5,
}

internal enum CXRefQualifierKind // Index.h (3802, 6)
{
	CXRefQualifier_None  = 0,
	CXRefQualifier_LValue  = 1,
	CXRefQualifier_RValue  = 2,
}

internal enum CX_CXXAccessSpecifier // Index.h (3850, 6)
{
	CX_CXXInvalidAccessSpecifier  = 0,
	CX_CXXPublic  = 1,
	CX_CXXProtected  = 2,
	CX_CXXPrivate  = 3,
}

internal enum CX_StorageClass // Index.h (3870, 6)
{
	CX_SC_Invalid  = 0,
	CX_SC_None  = 1,
	CX_SC_Extern  = 2,
	CX_SC_Static  = 3,
	CX_SC_PrivateExtern  = 4,
	CX_SC_OpenCLWorkGroupLocal  = 5,
	CX_SC_Auto  = 6,
	CX_SC_Register  = 7,
}

internal enum CXChildVisitResult // Index.h (3954, 6)
{
	CXChildVisit_Break  = 0,
	CXChildVisit_Continue  = 1,
	CXChildVisit_Recurse  = 2,
}

internal enum CXPrintingPolicyProperty // Index.h (4133, 6)
{
	CXPrintingPolicy_Indentation  = 0,
	CXPrintingPolicy_SuppressSpecifiers  = 1,
	CXPrintingPolicy_SuppressTagKeyword  = 2,
	CXPrintingPolicy_IncludeTagDefinition  = 3,
	CXPrintingPolicy_SuppressScope  = 4,
	CXPrintingPolicy_SuppressUnwrittenScope  = 5,
	CXPrintingPolicy_SuppressInitializers  = 6,
	CXPrintingPolicy_ConstantArraySizeAsWritten  = 7,
	CXPrintingPolicy_AnonymousTagLocations  = 8,
	CXPrintingPolicy_SuppressStrongLifetime  = 9,
	CXPrintingPolicy_SuppressLifetimeQualifiers  = 10,
	CXPrintingPolicy_SuppressTemplateArgsInCXXConstructors  = 11,
	CXPrintingPolicy_Bool  = 12,
	CXPrintingPolicy_Restrict  = 13,
	CXPrintingPolicy_Alignof  = 14,
	CXPrintingPolicy_UnderscoreAlignof  = 15,
	CXPrintingPolicy_UseVoidForZeroParams  = 16,
	CXPrintingPolicy_TerseOutput  = 17,
	CXPrintingPolicy_PolishForDeclaration  = 18,
	CXPrintingPolicy_Half  = 19,
	CXPrintingPolicy_MSWChar  = 20,
	CXPrintingPolicy_IncludeNewlines  = 21,
	CXPrintingPolicy_MSVCFormatting  = 22,
	CXPrintingPolicy_ConstantsAsWritten  = 23,
	CXPrintingPolicy_SuppressImplicitBase  = 24,
	CXPrintingPolicy_FullyQualifiedName  = 25,
	CXPrintingPolicy_LastProperty  = 25,
}

internal enum CXObjCPropertyAttrKind // Index.h (4323, 9)
{
	CXObjCPropertyAttr_noattr  = 0,
	CXObjCPropertyAttr_readonly  = 1,
	CXObjCPropertyAttr_getter  = 2,
	CXObjCPropertyAttr_assign  = 4,
	CXObjCPropertyAttr_readwrite  = 8,
	CXObjCPropertyAttr_retain  = 16,
	CXObjCPropertyAttr_copy  = 32,
	CXObjCPropertyAttr_nonatomic  = 64,
	CXObjCPropertyAttr_setter  = 128,
	CXObjCPropertyAttr_atomic  = 256,
	CXObjCPropertyAttr_weak  = 512,
	CXObjCPropertyAttr_strong  = 1024,
	CXObjCPropertyAttr_unsafe_unretained  = 2048,
	CXObjCPropertyAttr_class  = 4096,
}

internal enum CXObjCDeclQualifierKind // Index.h (4354, 9)
{
	CXObjCDeclQualifier_None  = 0,
	CXObjCDeclQualifier_In  = 1,
	CXObjCDeclQualifier_Inout  = 2,
	CXObjCDeclQualifier_Out  = 4,
	CXObjCDeclQualifier_Bycopy  = 8,
	CXObjCDeclQualifier_Byref  = 16,
	CXObjCDeclQualifier_Oneway  = 32,
}

internal enum CXNameRefFlags // Index.h (4678, 6)
{
	CXNameRange_WantQualifier  = 1,
	CXNameRange_WantTemplateArgs  = 2,
	CXNameRange_WantSinglePiece  = 4,
}

internal enum CXTokenKind // Index.h (4721, 14)
{
	CXToken_Punctuation  = 0,
	CXToken_Keyword  = 1,
	CXToken_Identifier  = 2,
	CXToken_Literal  = 3,
	CXToken_Comment  = 4,
}

[StructLayout (LayoutKind.Sequential)]
internal struct CXToken // Index.h (4751, 9)
{
	[MarshalAs (UnmanagedType.ByValArray, SizeConst=4)]
	[CTypeDetails ("ConstArrayOf<uint>")] internal uint[] @int_data;
	[CTypeDetails ("Pointer<void>")]internal System.IntPtr @ptr_data;
}

[StructLayout (LayoutKind.Sequential)]
internal struct CXCompletionResult // Index.h (4914, 9)
{
	internal CXCursorKind @CursorKind;
	internal CXCompletionString @CompletionString;
}

internal enum CXCompletionChunkKind // Index.h (4941, 6)
{
	CXCompletionChunk_Optional  = 0,
	CXCompletionChunk_TypedText  = 1,
	CXCompletionChunk_Text  = 2,
	CXCompletionChunk_Placeholder  = 3,
	CXCompletionChunk_Informative  = 4,
	CXCompletionChunk_CurrentParameter  = 5,
	CXCompletionChunk_LeftParen  = 6,
	CXCompletionChunk_RightParen  = 7,
	CXCompletionChunk_LeftBracket  = 8,
	CXCompletionChunk_RightBracket  = 9,
	CXCompletionChunk_LeftBrace  = 10,
	CXCompletionChunk_RightBrace  = 11,
	CXCompletionChunk_LeftAngle  = 12,
	CXCompletionChunk_RightAngle  = 13,
	CXCompletionChunk_Comma  = 14,
	CXCompletionChunk_ResultType  = 15,
	CXCompletionChunk_Colon  = 16,
	CXCompletionChunk_SemiColon  = 17,
	CXCompletionChunk_Equal  = 18,
	CXCompletionChunk_HorizontalSpace  = 19,
	CXCompletionChunk_VerticalSpace  = 20,
}

[StructLayout (LayoutKind.Sequential)]
internal struct CXCodeCompleteResults // Index.h (5252, 9)
{
	[CTypeDetails ("Pointer<CXCompletionResult>")]internal Pointer<CXCompletionResult> @Results;
	internal uint @NumResults;
}

internal enum CXCodeComplete_Flags // Index.h (5336, 6)
{
	CXCodeComplete_IncludeMacros  = 1,
	CXCodeComplete_IncludeCodePatterns  = 2,
	CXCodeComplete_IncludeBriefComments  = 4,
	CXCodeComplete_SkipPreamble  = 8,
	CXCodeComplete_IncludeCompletionsWithFixIts  = 16,
}

internal enum CXCompletionContext // Index.h (5375, 6)
{
	CXCompletionContext_Unexposed  = 0,
	CXCompletionContext_AnyType  = 1,
	CXCompletionContext_AnyValue  = 2,
	CXCompletionContext_ObjCObjectValue  = 4,
	CXCompletionContext_ObjCSelectorValue  = 8,
	CXCompletionContext_CXXClassTypeValue  = 16,
	CXCompletionContext_DotMemberAccess  = 32,
	CXCompletionContext_ArrowMemberAccess  = 64,
	CXCompletionContext_ObjCPropertyAccess  = 128,
	CXCompletionContext_EnumTag  = 256,
	CXCompletionContext_UnionTag  = 512,
	CXCompletionContext_StructTag  = 1024,
	CXCompletionContext_ClassTag  = 2048,
	CXCompletionContext_Namespace  = 4096,
	CXCompletionContext_NestedNameSpecifier  = 8192,
	CXCompletionContext_ObjCInterface  = 16384,
	CXCompletionContext_ObjCProtocol  = 32768,
	CXCompletionContext_ObjCCategory  = 65536,
	CXCompletionContext_ObjCInstanceMessage  = 131072,
	CXCompletionContext_ObjCClassMessage  = 262144,
	CXCompletionContext_ObjCSelectorName  = 524288,
	CXCompletionContext_MacroName  = 1048576,
	CXCompletionContext_NaturalLanguage  = 2097152,
	CXCompletionContext_Unknown  = 4194303,
}

internal enum CXEvalResultKind // Index.h (5730, 9)
{
	CXEval_Int  = 1,
	CXEval_Float  = 2,
	CXEval_ObjCStrLiteral  = 3,
	CXEval_StrLiteral  = 4,
	CXEval_CFStr  = 5,
	CXEval_Other  = 6,
	CXEval_UnExposed  = 0,
}

internal enum CXVisitorResult // Index.h (5870, 6)
{
	CXVisit_Break  = 0,
	CXVisit_Continue  = 1,
}

[StructLayout (LayoutKind.Sequential)]
internal struct CXCursorAndRangeVisitor // Index.h (5875, 16)
{
	[CTypeDetails ("Pointer<void>")]internal System.IntPtr @context;
	[CTypeDetails ("Pointer<CXVisitorResult (void *, CXCursor, CXSourceRange)>")]internal Delegates.delegate14 @visit;
}

internal enum CXResult // Index.h (5880, 9)
{
	CXResult_Success  = 0,
	CXResult_Invalid  = 1,
	CXResult_VisitBreak  = 2,
}

[StructLayout (LayoutKind.Sequential)]
internal struct CXIdxLoc // Index.h (5972, 9)
{
	[MarshalAs (UnmanagedType.ByValArray, SizeConst=2)]
	[CTypeDetails ("ConstArrayOf<System.IntPtr>")] internal System.IntPtr[] @ptr_data;
	internal uint @int_data;
}

[StructLayout (LayoutKind.Sequential)]
internal struct CXIdxIncludedFileInfo // Index.h (5980, 9)
{
	internal CXIdxLoc @hashLoc;
	[CTypeDetails ("Pointer<byte>")]internal string @filename;
	internal CXFile @file;
	internal int @isImport;
	internal int @isAngled;
	internal int @isModuleImport;
}

[StructLayout (LayoutKind.Sequential)]
internal struct CXIdxImportedASTFileInfo // Index.h (6005, 9)
{
	internal CXFile @file;
	internal CXModule @module;
	internal CXIdxLoc @loc;
	internal int @isImplicit;
}

internal enum CXIdxEntityKind // Index.h (6026, 9)
{
	CXIdxEntity_Unexposed  = 0,
	CXIdxEntity_Typedef  = 1,
	CXIdxEntity_Function  = 2,
	CXIdxEntity_Variable  = 3,
	CXIdxEntity_Field  = 4,
	CXIdxEntity_EnumConstant  = 5,
	CXIdxEntity_ObjCClass  = 6,
	CXIdxEntity_ObjCProtocol  = 7,
	CXIdxEntity_ObjCCategory  = 8,
	CXIdxEntity_ObjCInstanceMethod  = 9,
	CXIdxEntity_ObjCClassMethod  = 10,
	CXIdxEntity_ObjCProperty  = 11,
	CXIdxEntity_ObjCIvar  = 12,
	CXIdxEntity_Enum  = 13,
	CXIdxEntity_Struct  = 14,
	CXIdxEntity_Union  = 15,
	CXIdxEntity_CXXClass  = 16,
	CXIdxEntity_CXXNamespace  = 17,
	CXIdxEntity_CXXNamespaceAlias  = 18,
	CXIdxEntity_CXXStaticVariable  = 19,
	CXIdxEntity_CXXStaticMethod  = 20,
	CXIdxEntity_CXXInstanceMethod  = 21,
	CXIdxEntity_CXXConstructor  = 22,
	CXIdxEntity_CXXDestructor  = 23,
	CXIdxEntity_CXXConversionFunction  = 24,
	CXIdxEntity_CXXTypeAlias  = 25,
	CXIdxEntity_CXXInterface  = 26,
}

internal enum CXIdxEntityLanguage // Index.h (6061, 9)
{
	CXIdxEntityLang_None  = 0,
	CXIdxEntityLang_C  = 1,
	CXIdxEntityLang_ObjC  = 2,
	CXIdxEntityLang_CXX  = 3,
	CXIdxEntityLang_Swift  = 4,
}

internal enum CXIdxEntityCXXTemplateKind // Index.h (6079, 9)
{
	CXIdxEntity_NonTemplate  = 0,
	CXIdxEntity_Template  = 1,
	CXIdxEntity_TemplatePartialSpecialization  = 2,
	CXIdxEntity_TemplateSpecialization  = 3,
}

internal enum CXIdxAttrKind // Index.h (6086, 9)
{
	CXIdxAttr_Unexposed  = 0,
	CXIdxAttr_IBAction  = 1,
	CXIdxAttr_IBOutlet  = 2,
	CXIdxAttr_IBOutletCollection  = 3,
}

[StructLayout (LayoutKind.Sequential)]
internal struct CXIdxAttrInfo // Index.h (6093, 9)
{
	internal CXIdxAttrKind @kind;
	internal CXCursor @cursor;
	internal CXIdxLoc @loc;
}

[StructLayout (LayoutKind.Sequential)]
internal struct CXIdxEntityInfo // Index.h (6099, 9)
{
	internal CXIdxEntityKind @kind;
	internal CXIdxEntityCXXTemplateKind @templateKind;
	internal CXIdxEntityLanguage @lang;
	[CTypeDetails ("Pointer<byte>")]internal string @name;
	[CTypeDetails ("Pointer<byte>")]internal string @USR;
	internal CXCursor @cursor;
	[CTypeDetails ("Pointer<Pointer<CXIdxAttrInfo>>")]internal Pointer<Pointer<CXIdxAttrInfo>> @attributes;
	internal uint @numAttributes;
}

[StructLayout (LayoutKind.Sequential)]
internal struct CXIdxContainerInfo // Index.h (6110, 9)
{
	internal CXCursor @cursor;
}

[StructLayout (LayoutKind.Sequential)]
internal struct CXIdxIBOutletCollectionAttrInfo // Index.h (6114, 9)
{
	[CTypeDetails ("Pointer<CXIdxAttrInfo>")]internal Pointer<CXIdxAttrInfo> @attrInfo;
	[CTypeDetails ("Pointer<CXIdxEntityInfo>")]internal Pointer<CXIdxEntityInfo> @objcClass;
	internal CXCursor @classCursor;
	internal CXIdxLoc @classLoc;
}

internal enum CXIdxDeclInfoFlags // Index.h (6121, 9)
{
	CXIdxDeclFlag_Skipped  = 1,
}

[StructLayout (LayoutKind.Sequential)]
internal struct CXIdxDeclInfo // Index.h (6125, 9)
{
	[CTypeDetails ("Pointer<CXIdxEntityInfo>")]internal Pointer<CXIdxEntityInfo> @entityInfo;
	internal CXCursor @cursor;
	internal CXIdxLoc @loc;
	[CTypeDetails ("Pointer<CXIdxContainerInfo>")]internal Pointer<CXIdxContainerInfo> @semanticContainer;
	[CTypeDetails ("Pointer<CXIdxContainerInfo>")]internal Pointer<CXIdxContainerInfo> @lexicalContainer;
	internal int @isRedeclaration;
	internal int @isDefinition;
	internal int @isContainer;
	[CTypeDetails ("Pointer<CXIdxContainerInfo>")]internal Pointer<CXIdxContainerInfo> @declAsContainer;
	internal int @isImplicit;
	[CTypeDetails ("Pointer<Pointer<CXIdxAttrInfo>>")]internal Pointer<Pointer<CXIdxAttrInfo>> @attributes;
	internal uint @numAttributes;
	internal uint @flags;
}

internal enum CXIdxObjCContainerKind // Index.h (6151, 9)
{
	CXIdxObjCContainer_ForwardRef  = 0,
	CXIdxObjCContainer_Interface  = 1,
	CXIdxObjCContainer_Implementation  = 2,
}

[StructLayout (LayoutKind.Sequential)]
internal struct CXIdxObjCContainerDeclInfo // Index.h (6157, 9)
{
	[CTypeDetails ("Pointer<CXIdxDeclInfo>")]internal Pointer<CXIdxDeclInfo> @declInfo;
	internal CXIdxObjCContainerKind @kind;
}

[StructLayout (LayoutKind.Sequential)]
internal struct CXIdxBaseClassInfo // Index.h (6162, 9)
{
	[CTypeDetails ("Pointer<CXIdxEntityInfo>")]internal Pointer<CXIdxEntityInfo> @base;
	internal CXCursor @cursor;
	internal CXIdxLoc @loc;
}

[StructLayout (LayoutKind.Sequential)]
internal struct CXIdxObjCProtocolRefInfo // Index.h (6168, 9)
{
	[CTypeDetails ("Pointer<CXIdxEntityInfo>")]internal Pointer<CXIdxEntityInfo> @protocol;
	internal CXCursor @cursor;
	internal CXIdxLoc @loc;
}

[StructLayout (LayoutKind.Sequential)]
internal struct CXIdxObjCProtocolRefListInfo // Index.h (6174, 9)
{
	[CTypeDetails ("Pointer<Pointer<CXIdxObjCProtocolRefInfo>>")]internal Pointer<Pointer<CXIdxObjCProtocolRefInfo>> @protocols;
	internal uint @numProtocols;
}

[StructLayout (LayoutKind.Sequential)]
internal struct CXIdxObjCInterfaceDeclInfo // Index.h (6179, 9)
{
	[CTypeDetails ("Pointer<CXIdxObjCContainerDeclInfo>")]internal Pointer<CXIdxObjCContainerDeclInfo> @containerInfo;
	[CTypeDetails ("Pointer<CXIdxBaseClassInfo>")]internal Pointer<CXIdxBaseClassInfo> @superInfo;
	[CTypeDetails ("Pointer<CXIdxObjCProtocolRefListInfo>")]internal Pointer<CXIdxObjCProtocolRefListInfo> @protocols;
}

[StructLayout (LayoutKind.Sequential)]
internal struct CXIdxObjCCategoryDeclInfo // Index.h (6185, 9)
{
	[CTypeDetails ("Pointer<CXIdxObjCContainerDeclInfo>")]internal Pointer<CXIdxObjCContainerDeclInfo> @containerInfo;
	[CTypeDetails ("Pointer<CXIdxEntityInfo>")]internal Pointer<CXIdxEntityInfo> @objcClass;
	internal CXCursor @classCursor;
	internal CXIdxLoc @classLoc;
	[CTypeDetails ("Pointer<CXIdxObjCProtocolRefListInfo>")]internal Pointer<CXIdxObjCProtocolRefListInfo> @protocols;
}

[StructLayout (LayoutKind.Sequential)]
internal struct CXIdxObjCPropertyDeclInfo // Index.h (6193, 9)
{
	[CTypeDetails ("Pointer<CXIdxDeclInfo>")]internal Pointer<CXIdxDeclInfo> @declInfo;
	[CTypeDetails ("Pointer<CXIdxEntityInfo>")]internal Pointer<CXIdxEntityInfo> @getter;
	[CTypeDetails ("Pointer<CXIdxEntityInfo>")]internal Pointer<CXIdxEntityInfo> @setter;
}

[StructLayout (LayoutKind.Sequential)]
internal struct CXIdxCXXClassDeclInfo // Index.h (6199, 9)
{
	[CTypeDetails ("Pointer<CXIdxDeclInfo>")]internal Pointer<CXIdxDeclInfo> @declInfo;
	[CTypeDetails ("Pointer<Pointer<CXIdxBaseClassInfo>>")]internal Pointer<Pointer<CXIdxBaseClassInfo>> @bases;
	internal uint @numBases;
}

internal enum CXIdxEntityRefKind // Index.h (6211, 9)
{
	CXIdxEntityRef_Direct  = 1,
	CXIdxEntityRef_Implicit  = 2,
}

internal enum CXSymbolRole // Index.h (6229, 9)
{
	CXSymbolRole_None  = 0,
	CXSymbolRole_Declaration  = 1,
	CXSymbolRole_Definition  = 2,
	CXSymbolRole_Reference  = 4,
	CXSymbolRole_Read  = 8,
	CXSymbolRole_Write  = 16,
	CXSymbolRole_Call  = 32,
	CXSymbolRole_Dynamic  = 64,
	CXSymbolRole_AddressOf  = 128,
	CXSymbolRole_Implicit  = 256,
}

[StructLayout (LayoutKind.Sequential)]
internal struct CXIdxEntityRefInfo // Index.h (6245, 9)
{
	internal CXIdxEntityRefKind @kind;
	internal CXCursor @cursor;
	internal CXIdxLoc @loc;
	[CTypeDetails ("Pointer<CXIdxEntityInfo>")]internal Pointer<CXIdxEntityInfo> @referencedEntity;
	[CTypeDetails ("Pointer<CXIdxEntityInfo>")]internal Pointer<CXIdxEntityInfo> @parentEntity;
	[CTypeDetails ("Pointer<CXIdxContainerInfo>")]internal Pointer<CXIdxContainerInfo> @container;
	internal CXSymbolRole @role;
}

[StructLayout (LayoutKind.Sequential)]
internal struct IndexerCallbacks // Index.h (6282, 9)
{
	[CTypeDetails ("Pointer<int (CXClientData, void *)>")]internal Delegates.delegate15 @abortQuery;
	[CTypeDetails ("Pointer<void (CXClientData, CXDiagnosticSet, void *)>")]internal Delegates.delegate16 @diagnostic;
	[CTypeDetails ("Pointer<CXIdxClientFile (CXClientData, CXFile, void *)>")]internal Delegates.delegate17 @enteredMainFile;
	[CTypeDetails ("Pointer<CXIdxClientFile (CXClientData, const CXIdxIncludedFileInfo *)>")]internal Delegates.delegate18 @ppIncludedFile;
	[CTypeDetails ("Pointer<CXIdxClientASTFile (CXClientData, const CXIdxImportedASTFileInfo *)>")]internal Delegates.delegate19 @importedASTFile;
	[CTypeDetails ("Pointer<CXIdxClientContainer (CXClientData, void *)>")]internal Delegates.delegate20 @startedTranslationUnit;
	[CTypeDetails ("Pointer<void (CXClientData, const CXIdxDeclInfo *)>")]internal Delegates.delegate21 @indexDeclaration;
	[CTypeDetails ("Pointer<void (CXClientData, const CXIdxEntityRefInfo *)>")]internal Delegates.delegate22 @indexEntityReference;
}

internal enum CXIndexOptFlags // Index.h (6403, 9)
{
	CXIndexOpt_None  = 0,
	CXIndexOpt_SuppressRedundantRefs  = 1,
	CXIndexOpt_IndexFunctionLocalSymbols  = 2,
	CXIndexOpt_IndexImplicitTemplateInstantiations  = 4,
	CXIndexOpt_SuppressWarnings  = 8,
	CXIndexOpt_SkipParsedBodiesInSession  = 16,
}

internal partial class Natives
{
	const string LibraryName = "clang";
	// function clang_CompilationDatabase_fromDirectory - CXCompilationDatabase.h (80, 1)
	[DllImport (LibraryName)]
	internal static extern CXCompilationDatabase clang_CompilationDatabase_fromDirectory ([CTypeDetails ("Pointer<byte>")]string @BuildDir, [CTypeDetails ("Pointer<CXCompilationDatabase_Error>")]Pointer<CXCompilationDatabase_Error> @ErrorCode);

	// function clang_CompilationDatabase_dispose - CXCompilationDatabase.h (87, 1)
	[DllImport (LibraryName)]
	internal static extern void clang_CompilationDatabase_dispose (CXCompilationDatabase _0);

	// function clang_CompilationDatabase_getCompileCommands - CXCompilationDatabase.h (94, 1)
	[DllImport (LibraryName)]
	internal static extern CXCompileCommands clang_CompilationDatabase_getCompileCommands (CXCompilationDatabase _0, [CTypeDetails ("Pointer<byte>")]string @CompleteFileName);

	// function clang_CompilationDatabase_getAllCompileCommands - CXCompilationDatabase.h (101, 1)
	[DllImport (LibraryName)]
	internal static extern CXCompileCommands clang_CompilationDatabase_getAllCompileCommands (CXCompilationDatabase _0);

	// function clang_CompileCommands_dispose - CXCompilationDatabase.h (106, 21)
	[DllImport (LibraryName)]
	internal static extern void clang_CompileCommands_dispose (CXCompileCommands _0);

	// function clang_CompileCommands_getSize - CXCompilationDatabase.h (112, 1)
	[DllImport (LibraryName)]
	internal static extern uint clang_CompileCommands_getSize (CXCompileCommands _0);

	// function clang_CompileCommands_getCommand - CXCompilationDatabase.h (120, 1)
	[DllImport (LibraryName)]
	internal static extern CXCompileCommand clang_CompileCommands_getCommand (CXCompileCommands _0, uint @I);

	// function clang_CompileCommand_getDirectory - CXCompilationDatabase.h (126, 1)
	[DllImport (LibraryName)]
	internal static extern CXString clang_CompileCommand_getDirectory (CXCompileCommand _0);

	// function clang_CompileCommand_getFilename - CXCompilationDatabase.h (132, 1)
	[DllImport (LibraryName)]
	internal static extern CXString clang_CompileCommand_getFilename (CXCompileCommand _0);

	// function clang_CompileCommand_getNumArgs - CXCompilationDatabase.h (139, 1)
	[DllImport (LibraryName)]
	internal static extern uint clang_CompileCommand_getNumArgs (CXCompileCommand _0);

	// function clang_CompileCommand_getArg - CXCompilationDatabase.h (148, 1)
	[DllImport (LibraryName)]
	internal static extern CXString clang_CompileCommand_getArg (CXCompileCommand _0, uint @I);

	// function clang_CompileCommand_getNumMappedSources - CXCompilationDatabase.h (154, 1)
	[DllImport (LibraryName)]
	internal static extern uint clang_CompileCommand_getNumMappedSources (CXCompileCommand _0);

	// function clang_CompileCommand_getMappedSourcePath - CXCompilationDatabase.h (160, 1)
	[DllImport (LibraryName)]
	internal static extern CXString clang_CompileCommand_getMappedSourcePath (CXCompileCommand _0, uint @I);

	// function clang_CompileCommand_getMappedSourceContent - CXCompilationDatabase.h (166, 1)
	[DllImport (LibraryName)]
	internal static extern CXString clang_CompileCommand_getMappedSourceContent (CXCompileCommand _0, uint @I);

	// function clang_Cursor_getParsedComment - Documentation.h (47, 26)
	[DllImport (LibraryName)]
	internal static extern CXComment clang_Cursor_getParsedComment (CXCursor @C);

	// function clang_Comment_getKind - Documentation.h (213, 35)
	[DllImport (LibraryName)]
	internal static extern CXCommentKind clang_Comment_getKind (CXComment @Comment);

	// function clang_Comment_getNumChildren - Documentation.h (220, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_Comment_getNumChildren (CXComment @Comment);

	// function clang_Comment_getChild - Documentation.h (230, 11)
	[DllImport (LibraryName)]
	internal static extern CXComment clang_Comment_getChild (CXComment @Comment, uint @ChildIdx);

	// function clang_Comment_isWhitespace - Documentation.h (241, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_Comment_isWhitespace (CXComment @Comment);

	// function clang_InlineContentComment_hasTrailingNewline - Documentation.h (249, 10)
	[DllImport (LibraryName)]
	internal static extern uint clang_InlineContentComment_hasTrailingNewline (CXComment @Comment);

	// function clang_TextComment_getText - Documentation.h (256, 25)
	[DllImport (LibraryName)]
	internal static extern CXString clang_TextComment_getText (CXComment @Comment);

	// function clang_InlineCommandComment_getCommandName - Documentation.h (264, 10)
	[DllImport (LibraryName)]
	internal static extern CXString clang_InlineCommandComment_getCommandName (CXComment @Comment);

	// function clang_InlineCommandComment_getRenderKind - Documentation.h (273, 1)
	[DllImport (LibraryName)]
	internal static extern CXCommentInlineCommandRenderKind clang_InlineCommandComment_getRenderKind (CXComment @Comment);

	// function clang_InlineCommandComment_getNumArgs - Documentation.h (281, 10)
	[DllImport (LibraryName)]
	internal static extern uint clang_InlineCommandComment_getNumArgs (CXComment @Comment);

	// function clang_InlineCommandComment_getArgText - Documentation.h (291, 10)
	[DllImport (LibraryName)]
	internal static extern CXString clang_InlineCommandComment_getArgText (CXComment @Comment, uint @ArgIdx);

	// function clang_HTMLTagComment_getTagName - Documentation.h (300, 25)
	[DllImport (LibraryName)]
	internal static extern CXString clang_HTMLTagComment_getTagName (CXComment @Comment);

	// function clang_HTMLStartTagComment_isSelfClosing - Documentation.h (308, 10)
	[DllImport (LibraryName)]
	internal static extern uint clang_HTMLStartTagComment_isSelfClosing (CXComment @Comment);

	// function clang_HTMLStartTag_getNumAttrs - Documentation.h (315, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_HTMLStartTag_getNumAttrs (CXComment @Comment);

	// function clang_HTMLStartTag_getAttrName - Documentation.h (325, 10)
	[DllImport (LibraryName)]
	internal static extern CXString clang_HTMLStartTag_getAttrName (CXComment @Comment, uint @AttrIdx);

	// function clang_HTMLStartTag_getAttrValue - Documentation.h (335, 10)
	[DllImport (LibraryName)]
	internal static extern CXString clang_HTMLStartTag_getAttrValue (CXComment @Comment, uint @AttrIdx);

	// function clang_BlockCommandComment_getCommandName - Documentation.h (343, 10)
	[DllImport (LibraryName)]
	internal static extern CXString clang_BlockCommandComment_getCommandName (CXComment @Comment);

	// function clang_BlockCommandComment_getNumArgs - Documentation.h (351, 10)
	[DllImport (LibraryName)]
	internal static extern uint clang_BlockCommandComment_getNumArgs (CXComment @Comment);

	// function clang_BlockCommandComment_getArgText - Documentation.h (361, 10)
	[DllImport (LibraryName)]
	internal static extern CXString clang_BlockCommandComment_getArgText (CXComment @Comment, uint @ArgIdx);

	// function clang_BlockCommandComment_getParagraph - Documentation.h (371, 11)
	[DllImport (LibraryName)]
	internal static extern CXComment clang_BlockCommandComment_getParagraph (CXComment @Comment);

	// function clang_ParamCommandComment_getParamName - Documentation.h (379, 10)
	[DllImport (LibraryName)]
	internal static extern CXString clang_ParamCommandComment_getParamName (CXComment @Comment);

	// function clang_ParamCommandComment_isParamIndexValid - Documentation.h (389, 10)
	[DllImport (LibraryName)]
	internal static extern uint clang_ParamCommandComment_isParamIndexValid (CXComment @Comment);

	// function clang_ParamCommandComment_getParamIndex - Documentation.h (397, 10)
	[DllImport (LibraryName)]
	internal static extern uint clang_ParamCommandComment_getParamIndex (CXComment @Comment);

	// function clang_ParamCommandComment_isDirectionExplicit - Documentation.h (406, 10)
	[DllImport (LibraryName)]
	internal static extern uint clang_ParamCommandComment_isDirectionExplicit (CXComment @Comment);

	// function clang_ParamCommandComment_getDirection - Documentation.h (414, 34)
	[DllImport (LibraryName)]
	internal static extern CXCommentParamPassDirection clang_ParamCommandComment_getDirection (CXComment @Comment);

	// function clang_TParamCommandComment_getParamName - Documentation.h (423, 10)
	[DllImport (LibraryName)]
	internal static extern CXString clang_TParamCommandComment_getParamName (CXComment @Comment);

	// function clang_TParamCommandComment_isParamPositionValid - Documentation.h (435, 10)
	[DllImport (LibraryName)]
	internal static extern uint clang_TParamCommandComment_isParamPositionValid (CXComment @Comment);

	// function clang_TParamCommandComment_getDepth - Documentation.h (451, 10)
	[DllImport (LibraryName)]
	internal static extern uint clang_TParamCommandComment_getDepth (CXComment @Comment);

	// function clang_TParamCommandComment_getIndex - Documentation.h (472, 10)
	[DllImport (LibraryName)]
	internal static extern uint clang_TParamCommandComment_getIndex (CXComment @Comment, uint @Depth);

	// function clang_VerbatimBlockLineComment_getText - Documentation.h (480, 10)
	[DllImport (LibraryName)]
	internal static extern CXString clang_VerbatimBlockLineComment_getText (CXComment @Comment);

	// function clang_VerbatimLineComment_getText - Documentation.h (487, 25)
	[DllImport (LibraryName)]
	internal static extern CXString clang_VerbatimLineComment_getText (CXComment @Comment);

	// function clang_HTMLTagComment_getAsString - Documentation.h (497, 25)
	[DllImport (LibraryName)]
	internal static extern CXString clang_HTMLTagComment_getAsString (CXComment @Comment);

	// function clang_FullComment_getAsHTML - Documentation.h (530, 25)
	[DllImport (LibraryName)]
	internal static extern CXString clang_FullComment_getAsHTML (CXComment @Comment);

	// function clang_FullComment_getAsXML - Documentation.h (542, 25)
	[DllImport (LibraryName)]
	internal static extern CXString clang_FullComment_getAsXML (CXComment @Comment);

	// function clang_getCString - CXString.h (51, 28)
	[DllImport (LibraryName)]
	internal static extern string clang_getCString (CXString @string);

	// function clang_disposeString - CXString.h (56, 21)
	[DllImport (LibraryName)]
	internal static extern void clang_disposeString (CXString @string);

	// function clang_disposeStringSet - CXString.h (61, 21)
	[DllImport (LibraryName)]
	internal static extern void clang_disposeStringSet ([CTypeDetails ("Pointer<CXStringSet>")]Pointer<CXStringSet> @set);

	// function clang_getBuildSessionTimestamp - BuildSystem.h (34, 35)
	[DllImport (LibraryName)]
	internal static extern ulong clang_getBuildSessionTimestamp ();

	// function clang_VirtualFileOverlay_create - BuildSystem.h (49, 1)
	[DllImport (LibraryName)]
	internal static extern CXVirtualFileOverlay clang_VirtualFileOverlay_create (uint @options);

	// function clang_VirtualFileOverlay_addFileMapping - BuildSystem.h (57, 1)
	[DllImport (LibraryName)]
	internal static extern CXErrorCode clang_VirtualFileOverlay_addFileMapping (CXVirtualFileOverlay _0, [CTypeDetails ("Pointer<byte>")]string @virtualPath, [CTypeDetails ("Pointer<byte>")]string @realPath);

	// function clang_VirtualFileOverlay_setCaseSensitivity - BuildSystem.h (68, 1)
	[DllImport (LibraryName)]
	internal static extern CXErrorCode clang_VirtualFileOverlay_setCaseSensitivity (CXVirtualFileOverlay _0, int @caseSensitive);

	// function clang_VirtualFileOverlay_writeToBuffer - BuildSystem.h (81, 1)
	[DllImport (LibraryName)]
	internal static extern CXErrorCode clang_VirtualFileOverlay_writeToBuffer (CXVirtualFileOverlay _0, uint @options, [CTypeDetails ("Pointer<string>")]Pointer<string> @out_buffer_ptr, [CTypeDetails ("Pointer<uint>")]Pointer<uint> @out_buffer_size);

	// function clang_free - BuildSystem.h (91, 21)
	[DllImport (LibraryName)]
	internal static extern void clang_free ([CTypeDetails ("Pointer<void>")]System.IntPtr @buffer);

	// function clang_VirtualFileOverlay_dispose - BuildSystem.h (96, 21)
	[DllImport (LibraryName)]
	internal static extern void clang_VirtualFileOverlay_dispose (CXVirtualFileOverlay _0);

	// function clang_ModuleMapDescriptor_create - BuildSystem.h (110, 1)
	[DllImport (LibraryName)]
	internal static extern CXModuleMapDescriptor clang_ModuleMapDescriptor_create (uint @options);

	// function clang_ModuleMapDescriptor_setFrameworkModuleName - BuildSystem.h (117, 1)
	[DllImport (LibraryName)]
	internal static extern CXErrorCode clang_ModuleMapDescriptor_setFrameworkModuleName (CXModuleMapDescriptor _0, [CTypeDetails ("Pointer<byte>")]string @name);

	// function clang_ModuleMapDescriptor_setUmbrellaHeader - BuildSystem.h (125, 1)
	[DllImport (LibraryName)]
	internal static extern CXErrorCode clang_ModuleMapDescriptor_setUmbrellaHeader (CXModuleMapDescriptor _0, [CTypeDetails ("Pointer<byte>")]string @name);

	// function clang_ModuleMapDescriptor_writeToBuffer - BuildSystem.h (138, 1)
	[DllImport (LibraryName)]
	internal static extern CXErrorCode clang_ModuleMapDescriptor_writeToBuffer (CXModuleMapDescriptor _0, uint @options, [CTypeDetails ("Pointer<string>")]Pointer<string> @out_buffer_ptr, [CTypeDetails ("Pointer<uint>")]Pointer<uint> @out_buffer_size);

	// function clang_ModuleMapDescriptor_dispose - BuildSystem.h (145, 21)
	[DllImport (LibraryName)]
	internal static extern void clang_ModuleMapDescriptor_dispose (CXModuleMapDescriptor _0);

	// function clang_createIndex - Index.h (268, 24)
	[DllImport (LibraryName)]
	internal static extern CXIndex clang_createIndex (int @excludeDeclarationsFromPCH, int @displayDiagnostics);

	// function clang_disposeIndex - Index.h (277, 21)
	[DllImport (LibraryName)]
	internal static extern void clang_disposeIndex (CXIndex @index);

	// function clang_CXIndex_setGlobalOptions - Index.h (326, 21)
	[DllImport (LibraryName)]
	internal static extern void clang_CXIndex_setGlobalOptions (CXIndex _0, uint @options);

	// function clang_CXIndex_getGlobalOptions - Index.h (334, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_CXIndex_getGlobalOptions (CXIndex _0);

	// function clang_CXIndex_setInvocationEmissionPathOption - Index.h (344, 1)
	[DllImport (LibraryName)]
	internal static extern void clang_CXIndex_setInvocationEmissionPathOption (CXIndex _0, [CTypeDetails ("Pointer<byte>")]string @Path);

	// function clang_getFileName - Index.h (360, 25)
	[DllImport (LibraryName)]
	internal static extern CXString clang_getFileName (CXFile @SFile);

	// function clang_getFileTime - Index.h (365, 23)
	[DllImport (LibraryName)]
	internal static extern time_t clang_getFileTime (CXFile @SFile);

	// function clang_getFileUniqueID - Index.h (383, 20)
	[DllImport (LibraryName)]
	internal static extern int clang_getFileUniqueID (CXFile @file, [CTypeDetails ("Pointer<CXFileUniqueID>")]Pointer<CXFileUniqueID> @outID);

	// function clang_isFileMultipleIncludeGuarded - Index.h (391, 1)
	[DllImport (LibraryName)]
	internal static extern uint clang_isFileMultipleIncludeGuarded (CXTranslationUnit @tu, CXFile @file);

	// function clang_getFile - Index.h (403, 23)
	[DllImport (LibraryName)]
	internal static extern CXFile clang_getFile (CXTranslationUnit @tu, [CTypeDetails ("Pointer<byte>")]string @file_name);

	// function clang_getFileContents - Index.h (418, 28)
	[DllImport (LibraryName)]
	internal static extern string clang_getFileContents (CXTranslationUnit @tu, CXFile @file, [CTypeDetails ("Pointer<size_t>")]Pointer<size_t> @size);

	// function clang_File_isEqual - Index.h (425, 20)
	[DllImport (LibraryName)]
	internal static extern int clang_File_isEqual (CXFile @file1, CXFile @file2);

	// function clang_File_tryGetRealPathName - Index.h (432, 25)
	[DllImport (LibraryName)]
	internal static extern CXString clang_File_tryGetRealPathName (CXFile @file);

	// function clang_getNullLocation - Index.h (478, 33)
	[DllImport (LibraryName)]
	internal static extern CXSourceLocation clang_getNullLocation ();

	// function clang_equalLocations - Index.h (488, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_equalLocations (CXSourceLocation @loc1, CXSourceLocation @loc2);

	// function clang_getLocation - Index.h (495, 33)
	[DllImport (LibraryName)]
	internal static extern CXSourceLocation clang_getLocation (CXTranslationUnit @tu, CXFile @file, uint @line, uint @column);

	// function clang_getLocationForOffset - Index.h (503, 33)
	[DllImport (LibraryName)]
	internal static extern CXSourceLocation clang_getLocationForOffset (CXTranslationUnit @tu, CXFile @file, uint @offset);

	// function clang_Location_isInSystemHeader - Index.h (510, 20)
	[DllImport (LibraryName)]
	internal static extern int clang_Location_isInSystemHeader (CXSourceLocation @location);

	// function clang_Location_isFromMainFile - Index.h (516, 20)
	[DllImport (LibraryName)]
	internal static extern int clang_Location_isFromMainFile (CXSourceLocation @location);

	// function clang_getNullRange - Index.h (521, 30)
	[DllImport (LibraryName)]
	internal static extern CXSourceRange clang_getNullRange ();

	// function clang_getRange - Index.h (527, 30)
	[DllImport (LibraryName)]
	internal static extern CXSourceRange clang_getRange (CXSourceLocation @begin, CXSourceLocation @end);

	// function clang_equalRanges - Index.h (535, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_equalRanges (CXSourceRange @range1, CXSourceRange @range2);

	// function clang_Range_isNull - Index.h (541, 20)
	[DllImport (LibraryName)]
	internal static extern int clang_Range_isNull (CXSourceRange @range);

	// function clang_getExpansionLocation - Index.h (565, 21)
	[DllImport (LibraryName)]
	internal static extern void clang_getExpansionLocation (CXSourceLocation @location, [CTypeDetails ("Pointer<CXFile>")]Pointer<CXFile> @file, [CTypeDetails ("Pointer<uint>")]Pointer<uint> @line, [CTypeDetails ("Pointer<uint>")]Pointer<uint> @column, [CTypeDetails ("Pointer<uint>")]Pointer<uint> @offset);

	// function clang_getPresumedLocation - Index.h (611, 21)
	[DllImport (LibraryName)]
	internal static extern void clang_getPresumedLocation (CXSourceLocation @location, [CTypeDetails ("Pointer<CXString>")]Pointer<CXString> @filename, [CTypeDetails ("Pointer<uint>")]Pointer<uint> @line, [CTypeDetails ("Pointer<uint>")]Pointer<uint> @column);

	// function clang_getInstantiationLocation - Index.h (624, 21)
	[DllImport (LibraryName)]
	internal static extern void clang_getInstantiationLocation (CXSourceLocation @location, [CTypeDetails ("Pointer<CXFile>")]Pointer<CXFile> @file, [CTypeDetails ("Pointer<uint>")]Pointer<uint> @line, [CTypeDetails ("Pointer<uint>")]Pointer<uint> @column, [CTypeDetails ("Pointer<uint>")]Pointer<uint> @offset);

	// function clang_getSpellingLocation - Index.h (652, 21)
	[DllImport (LibraryName)]
	internal static extern void clang_getSpellingLocation (CXSourceLocation @location, [CTypeDetails ("Pointer<CXFile>")]Pointer<CXFile> @file, [CTypeDetails ("Pointer<uint>")]Pointer<uint> @line, [CTypeDetails ("Pointer<uint>")]Pointer<uint> @column, [CTypeDetails ("Pointer<uint>")]Pointer<uint> @offset);

	// function clang_getFileLocation - Index.h (681, 21)
	[DllImport (LibraryName)]
	internal static extern void clang_getFileLocation (CXSourceLocation @location, [CTypeDetails ("Pointer<CXFile>")]Pointer<CXFile> @file, [CTypeDetails ("Pointer<uint>")]Pointer<uint> @line, [CTypeDetails ("Pointer<uint>")]Pointer<uint> @column, [CTypeDetails ("Pointer<uint>")]Pointer<uint> @offset);

	// function clang_getRangeStart - Index.h (691, 33)
	[DllImport (LibraryName)]
	internal static extern CXSourceLocation clang_getRangeStart (CXSourceRange @range);

	// function clang_getRangeEnd - Index.h (697, 33)
	[DllImport (LibraryName)]
	internal static extern CXSourceLocation clang_getRangeEnd (CXSourceRange @range);

	// function clang_getSkippedRanges - Index.h (717, 35)
	[DllImport (LibraryName)]
	internal static extern Pointer<CXSourceRangeList> clang_getSkippedRanges (CXTranslationUnit @tu, CXFile @file);

	// function clang_getAllSkippedRanges - Index.h (727, 35)
	[DllImport (LibraryName)]
	internal static extern Pointer<CXSourceRangeList> clang_getAllSkippedRanges (CXTranslationUnit @tu);

	// function clang_disposeSourceRangeList - Index.h (732, 21)
	[DllImport (LibraryName)]
	internal static extern void clang_disposeSourceRangeList ([CTypeDetails ("Pointer<CXSourceRangeList>")]Pointer<CXSourceRangeList> @ranges);

	// function clang_getNumDiagnosticsInSet - Index.h (793, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_getNumDiagnosticsInSet (CXDiagnosticSet @Diags);

	// function clang_getDiagnosticInSet - Index.h (804, 29)
	[DllImport (LibraryName)]
	internal static extern CXDiagnostic clang_getDiagnosticInSet (CXDiagnosticSet @Diags, uint @Index);

	// function clang_loadDiagnostics - Index.h (849, 32)
	[DllImport (LibraryName)]
	internal static extern CXDiagnosticSet clang_loadDiagnostics ([CTypeDetails ("Pointer<byte>")]string @file, [CTypeDetails ("Pointer<CXLoadDiag_Error>")]Pointer<CXLoadDiag_Error> @error, [CTypeDetails ("Pointer<CXString>")]Pointer<CXString> @errorString);

	// function clang_disposeDiagnosticSet - Index.h (856, 21)
	[DllImport (LibraryName)]
	internal static extern void clang_disposeDiagnosticSet (CXDiagnosticSet @Diags);

	// function clang_getChildDiagnostics - Index.h (864, 32)
	[DllImport (LibraryName)]
	internal static extern CXDiagnosticSet clang_getChildDiagnostics (CXDiagnostic @D);

	// function clang_getNumDiagnostics - Index.h (870, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_getNumDiagnostics (CXTranslationUnit @Unit);

	// function clang_getDiagnostic - Index.h (881, 29)
	[DllImport (LibraryName)]
	internal static extern CXDiagnostic clang_getDiagnostic (CXTranslationUnit @Unit, uint @Index);

	// function clang_getDiagnosticSetFromTU - Index.h (891, 3)
	[DllImport (LibraryName)]
	internal static extern CXDiagnosticSet clang_getDiagnosticSetFromTU (CXTranslationUnit @Unit);

	// function clang_disposeDiagnostic - Index.h (896, 21)
	[DllImport (LibraryName)]
	internal static extern void clang_disposeDiagnostic (CXDiagnostic @Diagnostic);

	// function clang_formatDiagnostic - Index.h (981, 25)
	[DllImport (LibraryName)]
	internal static extern CXString clang_formatDiagnostic (CXDiagnostic @Diagnostic, uint @Options);

	// function clang_defaultDiagnosticDisplayOptions - Index.h (991, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_defaultDiagnosticDisplayOptions ();

	// function clang_getDiagnosticSeverity - Index.h (997, 1)
	[DllImport (LibraryName)]
	internal static extern CXDiagnosticSeverity clang_getDiagnosticSeverity (CXDiagnostic _0);

	// function clang_getDiagnosticLocation - Index.h (1005, 33)
	[DllImport (LibraryName)]
	internal static extern CXSourceLocation clang_getDiagnosticLocation (CXDiagnostic _0);

	// function clang_getDiagnosticSpelling - Index.h (1010, 25)
	[DllImport (LibraryName)]
	internal static extern CXString clang_getDiagnosticSpelling (CXDiagnostic _0);

	// function clang_getDiagnosticOption - Index.h (1024, 25)
	[DllImport (LibraryName)]
	internal static extern CXString clang_getDiagnosticOption (CXDiagnostic @Diag, [CTypeDetails ("Pointer<CXString>")]Pointer<CXString> @Disable);

	// function clang_getDiagnosticCategory - Index.h (1037, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_getDiagnosticCategory (CXDiagnostic _0);

	// function clang_getDiagnosticCategoryName - Index.h (1050, 10)
	[DllImport (LibraryName)]
	internal static extern CXString clang_getDiagnosticCategoryName (uint @Category);

	// function clang_getDiagnosticCategoryText - Index.h (1057, 25)
	[DllImport (LibraryName)]
	internal static extern CXString clang_getDiagnosticCategoryText (CXDiagnostic _0);

	// function clang_getDiagnosticNumRanges - Index.h (1063, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_getDiagnosticNumRanges (CXDiagnostic _0);

	// function clang_getDiagnosticRange - Index.h (1078, 30)
	[DllImport (LibraryName)]
	internal static extern CXSourceRange clang_getDiagnosticRange (CXDiagnostic @Diagnostic, uint @Range);

	// function clang_getDiagnosticNumFixIts - Index.h (1085, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_getDiagnosticNumFixIts (CXDiagnostic @Diagnostic);

	// function clang_getDiagnosticFixIt - Index.h (1112, 25)
	[DllImport (LibraryName)]
	internal static extern CXString clang_getDiagnosticFixIt (CXDiagnostic @Diagnostic, uint @FixIt, [CTypeDetails ("Pointer<CXSourceRange>")]Pointer<CXSourceRange> @ReplacementRange);

	// function clang_getTranslationUnitSpelling - Index.h (1134, 1)
	[DllImport (LibraryName)]
	internal static extern CXString clang_getTranslationUnitSpelling (CXTranslationUnit @CTUnit);

	// function clang_createTranslationUnitFromSourceFile - Index.h (1176, 34)
	[DllImport (LibraryName)]
	internal static extern CXTranslationUnit clang_createTranslationUnitFromSourceFile (CXIndex @CIdx, [CTypeDetails ("Pointer<byte>")]string @source_filename, int @num_clang_command_line_args, [CTypeDetails ("Pointer<string>")]Pointer<string> @clang_command_line_args, uint @num_unsaved_files, [CTypeDetails ("Pointer<CXUnsavedFile>")]Pointer<CXUnsavedFile> @unsaved_files);

	// function clang_createTranslationUnit - Index.h (1190, 34)
	[DllImport (LibraryName)]
	internal static extern CXTranslationUnit clang_createTranslationUnit (CXIndex @CIdx, [CTypeDetails ("Pointer<byte>")]string @ast_filename);

	// function clang_createTranslationUnit2 - Index.h (1202, 33)
	[DllImport (LibraryName)]
	internal static extern CXErrorCode clang_createTranslationUnit2 (CXIndex @CIdx, [CTypeDetails ("Pointer<byte>")]string @ast_filename, [CTypeDetails ("Pointer<CXTranslationUnit>")]Pointer<CXTranslationUnit> @out_TU);

	// function clang_defaultEditingTranslationUnitOptions - Index.h (1350, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_defaultEditingTranslationUnitOptions ();

	// function clang_parseTranslationUnit - Index.h (1359, 1)
	[DllImport (LibraryName)]
	internal static extern CXTranslationUnit clang_parseTranslationUnit (CXIndex @CIdx, [CTypeDetails ("Pointer<byte>")]string @source_filename, [CTypeDetails ("Pointer<string>")]Pointer<string> @command_line_args, int @num_command_line_args, [CTypeDetails ("Pointer<CXUnsavedFile>")]Pointer<CXUnsavedFile> @unsaved_files, uint @num_unsaved_files, uint @options);

	// function clang_parseTranslationUnit2 - Index.h (1412, 1)
	[DllImport (LibraryName)]
	internal static extern CXErrorCode clang_parseTranslationUnit2 (CXIndex @CIdx, [CTypeDetails ("Pointer<byte>")]string @source_filename, [CTypeDetails ("Pointer<string>")]Pointer<string> @command_line_args, int @num_command_line_args, [CTypeDetails ("Pointer<CXUnsavedFile>")]Pointer<CXUnsavedFile> @unsaved_files, uint @num_unsaved_files, uint @options, [CTypeDetails ("Pointer<CXTranslationUnit>")]Pointer<CXTranslationUnit> @out_TU);

	// function clang_parseTranslationUnit2FullArgv - Index.h (1426, 33)
	[DllImport (LibraryName)]
	internal static extern CXErrorCode clang_parseTranslationUnit2FullArgv (CXIndex @CIdx, [CTypeDetails ("Pointer<byte>")]string @source_filename, [CTypeDetails ("Pointer<string>")]Pointer<string> @command_line_args, int @num_command_line_args, [CTypeDetails ("Pointer<CXUnsavedFile>")]Pointer<CXUnsavedFile> @unsaved_files, uint @num_unsaved_files, uint @options, [CTypeDetails ("Pointer<CXTranslationUnit>")]Pointer<CXTranslationUnit> @out_TU);

	// function clang_defaultSaveOptions - Index.h (1455, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_defaultSaveOptions (CXTranslationUnit @TU);

	// function clang_saveTranslationUnit - Index.h (1515, 20)
	[DllImport (LibraryName)]
	internal static extern int clang_saveTranslationUnit (CXTranslationUnit @TU, [CTypeDetails ("Pointer<byte>")]string @FileName, uint @options);

	// function clang_suspendTranslationUnit - Index.h (1526, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_suspendTranslationUnit (CXTranslationUnit _0);

	// function clang_disposeTranslationUnit - Index.h (1531, 21)
	[DllImport (LibraryName)]
	internal static extern void clang_disposeTranslationUnit (CXTranslationUnit _0);

	// function clang_defaultReparseOptions - Index.h (1557, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_defaultReparseOptions (CXTranslationUnit @TU);

	// function clang_reparseTranslationUnit - Index.h (1598, 20)
	[DllImport (LibraryName)]
	internal static extern int clang_reparseTranslationUnit (CXTranslationUnit @TU, uint @num_unsaved_files, [CTypeDetails ("Pointer<CXUnsavedFile>")]Pointer<CXUnsavedFile> @unsaved_files, uint @options);

	// function clang_getTUResourceUsageName - Index.h (1634, 13)
	[DllImport (LibraryName)]
	internal static extern string clang_getTUResourceUsageName (CXTUResourceUsageKind @kind);

	// function clang_getCXTUResourceUsage - Index.h (1664, 34)
	[DllImport (LibraryName)]
	internal static extern CXTUResourceUsage clang_getCXTUResourceUsage (CXTranslationUnit @TU);

	// function clang_disposeCXTUResourceUsage - Index.h (1666, 21)
	[DllImport (LibraryName)]
	internal static extern void clang_disposeCXTUResourceUsage (CXTUResourceUsage @usage);

	// function clang_getTranslationUnitTargetInfo - Index.h (1674, 1)
	[DllImport (LibraryName)]
	internal static extern CXTargetInfo clang_getTranslationUnitTargetInfo (CXTranslationUnit @CTUnit);

	// function clang_TargetInfo_dispose - Index.h (1680, 1)
	[DllImport (LibraryName)]
	internal static extern void clang_TargetInfo_dispose (CXTargetInfo @Info);

	// function clang_TargetInfo_getTriple - Index.h (1688, 1)
	[DllImport (LibraryName)]
	internal static extern CXString clang_TargetInfo_getTriple (CXTargetInfo @Info);

	// function clang_TargetInfo_getPointerWidth - Index.h (1696, 1)
	[DllImport (LibraryName)]
	internal static extern int clang_TargetInfo_getPointerWidth (CXTargetInfo @Info);

	// function clang_getNullCursor - Index.h (2629, 25)
	[DllImport (LibraryName)]
	internal static extern CXCursor clang_getNullCursor ();

	// function clang_getTranslationUnitCursor - Index.h (2637, 25)
	[DllImport (LibraryName)]
	internal static extern CXCursor clang_getTranslationUnitCursor (CXTranslationUnit _0);

	// function clang_equalCursors - Index.h (2642, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_equalCursors (CXCursor _0, CXCursor _1);

	// function clang_Cursor_isNull - Index.h (2647, 20)
	[DllImport (LibraryName)]
	internal static extern int clang_Cursor_isNull (CXCursor @cursor);

	// function clang_hashCursor - Index.h (2652, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_hashCursor (CXCursor _0);

	// function clang_getCursorKind - Index.h (2657, 34)
	[DllImport (LibraryName)]
	internal static extern CXCursorKind clang_getCursorKind (CXCursor _0);

	// function clang_isDeclaration - Index.h (2662, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_isDeclaration (CXCursorKind _0);

	// function clang_isInvalidDeclaration - Index.h (2672, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_isInvalidDeclaration (CXCursor _0);

	// function clang_isReference - Index.h (2682, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_isReference (CXCursorKind _0);

	// function clang_isExpression - Index.h (2687, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_isExpression (CXCursorKind _0);

	// function clang_isStatement - Index.h (2692, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_isStatement (CXCursorKind _0);

	// function clang_isAttribute - Index.h (2697, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_isAttribute (CXCursorKind _0);

	// function clang_Cursor_hasAttrs - Index.h (2702, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_Cursor_hasAttrs (CXCursor @C);

	// function clang_isInvalid - Index.h (2708, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_isInvalid (CXCursorKind _0);

	// function clang_isTranslationUnit - Index.h (2714, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_isTranslationUnit (CXCursorKind _0);

	// function clang_isPreprocessing - Index.h (2720, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_isPreprocessing (CXCursorKind _0);

	// function clang_isUnexposed - Index.h (2726, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_isUnexposed (CXCursorKind _0);

	// function clang_getCursorLinkage - Index.h (2752, 35)
	[DllImport (LibraryName)]
	internal static extern CXLinkageKind clang_getCursorLinkage (CXCursor @cursor);

	// function clang_getCursorVisibility - Index.h (2778, 38)
	[DllImport (LibraryName)]
	internal static extern CXVisibilityKind clang_getCursorVisibility (CXCursor @cursor);

	// function clang_getCursorAvailability - Index.h (2789, 1)
	[DllImport (LibraryName)]
	internal static extern CXAvailabilityKind clang_getCursorAvailability (CXCursor @cursor);

	// function clang_getCursorPlatformAvailability - Index.h (2865, 1)
	[DllImport (LibraryName)]
	internal static extern int clang_getCursorPlatformAvailability (CXCursor @cursor, [CTypeDetails ("Pointer<int>")]Pointer<int> @always_deprecated, [CTypeDetails ("Pointer<CXString>")]Pointer<CXString> @deprecated_message, [CTypeDetails ("Pointer<int>")]Pointer<int> @always_unavailable, [CTypeDetails ("Pointer<CXString>")]Pointer<CXString> @unavailable_message, [CTypeDetails ("Pointer<CXPlatformAvailability>")]Pointer<CXPlatformAvailability> @availability, int @availability_size);

	// function clang_disposeCXPlatformAvailability - Index.h (2877, 1)
	[DllImport (LibraryName)]
	internal static extern void clang_disposeCXPlatformAvailability ([CTypeDetails ("Pointer<CXPlatformAvailability>")]Pointer<CXPlatformAvailability> @availability);

	// function clang_getCursorLanguage - Index.h (2892, 36)
	[DllImport (LibraryName)]
	internal static extern CXLanguageKind clang_getCursorLanguage (CXCursor @cursor);

	// function clang_getCursorTLSKind - Index.h (2908, 31)
	[DllImport (LibraryName)]
	internal static extern CXTLSKind clang_getCursorTLSKind (CXCursor @cursor);

	// function clang_Cursor_getTranslationUnit - Index.h (2913, 34)
	[DllImport (LibraryName)]
	internal static extern CXTranslationUnit clang_Cursor_getTranslationUnit (CXCursor _0);

	// function clang_createCXCursorSet - Index.h (2923, 28)
	[DllImport (LibraryName)]
	internal static extern CXCursorSet clang_createCXCursorSet ();

	// function clang_disposeCXCursorSet - Index.h (2928, 21)
	[DllImport (LibraryName)]
	internal static extern void clang_disposeCXCursorSet (CXCursorSet @cset);

	// function clang_CXCursorSet_contains - Index.h (2935, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_CXCursorSet_contains (CXCursorSet @cset, CXCursor @cursor);

	// function clang_CXCursorSet_insert - Index.h (2943, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_CXCursorSet_insert (CXCursorSet @cset, CXCursor @cursor);

	// function clang_getCursorSemanticParent - Index.h (2979, 25)
	[DllImport (LibraryName)]
	internal static extern CXCursor clang_getCursorSemanticParent (CXCursor @cursor);

	// function clang_getCursorLexicalParent - Index.h (3015, 25)
	[DllImport (LibraryName)]
	internal static extern CXCursor clang_getCursorLexicalParent (CXCursor @cursor);

	// function clang_getOverriddenCursors - Index.h (3060, 21)
	[DllImport (LibraryName)]
	internal static extern void clang_getOverriddenCursors (CXCursor @cursor, [CTypeDetails ("Pointer<Pointer<CXCursor>>")]Pointer<Pointer<CXCursor>> @overridden, [CTypeDetails ("Pointer<uint>")]Pointer<uint> @num_overridden);

	// function clang_disposeOverriddenCursors - Index.h (3068, 21)
	[DllImport (LibraryName)]
	internal static extern void clang_disposeOverriddenCursors ([CTypeDetails ("Pointer<CXCursor>")]Pointer<CXCursor> @overridden);

	// function clang_getIncludedFile - Index.h (3074, 23)
	[DllImport (LibraryName)]
	internal static extern CXFile clang_getIncludedFile (CXCursor @cursor);

	// function clang_getCursor - Index.h (3106, 25)
	[DllImport (LibraryName)]
	internal static extern CXCursor clang_getCursor (CXTranslationUnit _0, CXSourceLocation _1);

	// function clang_getCursorLocation - Index.h (3118, 33)
	[DllImport (LibraryName)]
	internal static extern CXSourceLocation clang_getCursorLocation (CXCursor _0);

	// function clang_getCursorExtent - Index.h (3131, 30)
	[DllImport (LibraryName)]
	internal static extern CXSourceRange clang_getCursorExtent (CXCursor _0);

	// function clang_getCursorType - Index.h (3311, 23)
	[DllImport (LibraryName)]
	internal static extern CXType clang_getCursorType (CXCursor @C);

	// function clang_getTypeSpelling - Index.h (3319, 25)
	[DllImport (LibraryName)]
	internal static extern CXString clang_getTypeSpelling (CXType @CT);

	// function clang_getTypedefDeclUnderlyingType - Index.h (3327, 23)
	[DllImport (LibraryName)]
	internal static extern CXType clang_getTypedefDeclUnderlyingType (CXCursor @C);

	// function clang_getEnumDeclIntegerType - Index.h (3335, 23)
	[DllImport (LibraryName)]
	internal static extern CXType clang_getEnumDeclIntegerType (CXCursor @C);

	// function clang_getEnumConstantDeclValue - Index.h (3345, 26)
	[DllImport (LibraryName)]
	internal static extern long clang_getEnumConstantDeclValue (CXCursor @C);

	// function clang_getEnumConstantDeclUnsignedValue - Index.h (3355, 35)
	[DllImport (LibraryName)]
	internal static extern ulong clang_getEnumConstantDeclUnsignedValue (CXCursor @C);

	// function clang_getFieldDeclBitWidth - Index.h (3362, 20)
	[DllImport (LibraryName)]
	internal static extern int clang_getFieldDeclBitWidth (CXCursor @C);

	// function clang_Cursor_getNumArguments - Index.h (3371, 20)
	[DllImport (LibraryName)]
	internal static extern int clang_Cursor_getNumArguments (CXCursor @C);

	// function clang_Cursor_getArgument - Index.h (3380, 25)
	[DllImport (LibraryName)]
	internal static extern CXCursor clang_Cursor_getArgument (CXCursor @C, uint @i);

	// function clang_Cursor_getNumTemplateArguments - Index.h (3418, 20)
	[DllImport (LibraryName)]
	internal static extern int clang_Cursor_getNumTemplateArguments (CXCursor @C);

	// function clang_Cursor_getTemplateArgumentKind - Index.h (3436, 44)
	[DllImport (LibraryName)]
	internal static extern CXTemplateArgumentKind clang_Cursor_getTemplateArgumentKind (CXCursor @C, uint @I);

	// function clang_Cursor_getTemplateArgumentType - Index.h (3457, 23)
	[DllImport (LibraryName)]
	internal static extern CXType clang_Cursor_getTemplateArgumentType (CXCursor @C, uint @I);

	// function clang_Cursor_getTemplateArgumentValue - Index.h (3477, 26)
	[DllImport (LibraryName)]
	internal static extern long clang_Cursor_getTemplateArgumentValue (CXCursor @C, uint @I);

	// function clang_Cursor_getTemplateArgumentUnsignedValue - Index.h (3497, 35)
	[DllImport (LibraryName)]
	internal static extern ulong clang_Cursor_getTemplateArgumentUnsignedValue (CXCursor @C, uint @I);

	// function clang_equalTypes - Index.h (3506, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_equalTypes (CXType @A, CXType @B);

	// function clang_getCanonicalType - Index.h (3516, 23)
	[DllImport (LibraryName)]
	internal static extern CXType clang_getCanonicalType (CXType @T);

	// function clang_isConstQualifiedType - Index.h (3523, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_isConstQualifiedType (CXType @T);

	// function clang_Cursor_isMacroFunctionLike - Index.h (3529, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_Cursor_isMacroFunctionLike (CXCursor @C);

	// function clang_Cursor_isMacroBuiltin - Index.h (3535, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_Cursor_isMacroBuiltin (CXCursor @C);

	// function clang_Cursor_isFunctionInlined - Index.h (3541, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_Cursor_isFunctionInlined (CXCursor @C);

	// function clang_isVolatileQualifiedType - Index.h (3548, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_isVolatileQualifiedType (CXType @T);

	// function clang_isRestrictQualifiedType - Index.h (3555, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_isRestrictQualifiedType (CXType @T);

	// function clang_getAddressSpace - Index.h (3560, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_getAddressSpace (CXType @T);

	// function clang_getTypedefName - Index.h (3565, 25)
	[DllImport (LibraryName)]
	internal static extern CXString clang_getTypedefName (CXType @CT);

	// function clang_getPointeeType - Index.h (3570, 23)
	[DllImport (LibraryName)]
	internal static extern CXType clang_getPointeeType (CXType @T);

	// function clang_getTypeDeclaration - Index.h (3575, 25)
	[DllImport (LibraryName)]
	internal static extern CXCursor clang_getTypeDeclaration (CXType @T);

	// function clang_getDeclObjCTypeEncoding - Index.h (3580, 25)
	[DllImport (LibraryName)]
	internal static extern CXString clang_getDeclObjCTypeEncoding (CXCursor @C);

	// function clang_Type_getObjCEncoding - Index.h (3585, 25)
	[DllImport (LibraryName)]
	internal static extern CXString clang_Type_getObjCEncoding (CXType @type);

	// function clang_getTypeKindSpelling - Index.h (3590, 25)
	[DllImport (LibraryName)]
	internal static extern CXString clang_getTypeKindSpelling (CXTypeKind @K);

	// function clang_getFunctionTypeCallingConv - Index.h (3597, 35)
	[DllImport (LibraryName)]
	internal static extern CXCallingConv clang_getFunctionTypeCallingConv (CXType @T);

	// function clang_getResultType - Index.h (3604, 23)
	[DllImport (LibraryName)]
	internal static extern CXType clang_getResultType (CXType @T);

	// function clang_getExceptionSpecificationType - Index.h (3612, 20)
	[DllImport (LibraryName)]
	internal static extern int clang_getExceptionSpecificationType (CXType @T);

	// function clang_getNumArgTypes - Index.h (3620, 20)
	[DllImport (LibraryName)]
	internal static extern int clang_getNumArgTypes (CXType @T);

	// function clang_getArgType - Index.h (3628, 23)
	[DllImport (LibraryName)]
	internal static extern CXType clang_getArgType (CXType @T, uint @i);

	// function clang_isFunctionTypeVariadic - Index.h (3633, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_isFunctionTypeVariadic (CXType @T);

	// function clang_getCursorResultType - Index.h (3640, 23)
	[DllImport (LibraryName)]
	internal static extern CXType clang_getCursorResultType (CXCursor @C);

	// function clang_getCursorExceptionSpecificationType - Index.h (3648, 20)
	[DllImport (LibraryName)]
	internal static extern int clang_getCursorExceptionSpecificationType (CXCursor @C);

	// function clang_isPODType - Index.h (3654, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_isPODType (CXType @T);

	// function clang_getElementType - Index.h (3662, 23)
	[DllImport (LibraryName)]
	internal static extern CXType clang_getElementType (CXType @T);

	// function clang_getNumElements - Index.h (3670, 26)
	[DllImport (LibraryName)]
	internal static extern long clang_getNumElements (CXType @T);

	// function clang_getArrayElementType - Index.h (3677, 23)
	[DllImport (LibraryName)]
	internal static extern CXType clang_getArrayElementType (CXType @T);

	// function clang_getArraySize - Index.h (3684, 26)
	[DllImport (LibraryName)]
	internal static extern long clang_getArraySize (CXType @T);

	// function clang_Type_getNamedType - Index.h (3691, 23)
	[DllImport (LibraryName)]
	internal static extern CXType clang_Type_getNamedType (CXType @T);

	// function clang_Type_isTransparentTagTypedef - Index.h (3701, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_Type_isTransparentTagTypedef (CXType @T);

	// function clang_Type_getAlignOf - Index.h (3746, 26)
	[DllImport (LibraryName)]
	internal static extern long clang_Type_getAlignOf (CXType @T);

	// function clang_Type_getClassType - Index.h (3753, 23)
	[DllImport (LibraryName)]
	internal static extern CXType clang_Type_getClassType (CXType @T);

	// function clang_Type_getSizeOf - Index.h (3764, 26)
	[DllImport (LibraryName)]
	internal static extern long clang_Type_getSizeOf (CXType @T);

	// function clang_Type_getOffsetOf - Index.h (3779, 26)
	[DllImport (LibraryName)]
	internal static extern long clang_Type_getOffsetOf (CXType @T, [CTypeDetails ("Pointer<byte>")]string @S);

	// function clang_Cursor_getOffsetOfField - Index.h (3794, 26)
	[DllImport (LibraryName)]
	internal static extern long clang_Cursor_getOffsetOfField (CXCursor @C);

	// function clang_Cursor_isAnonymous - Index.h (3800, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_Cursor_isAnonymous (CXCursor @C);

	// function clang_Type_getNumTemplateArguments - Index.h (3815, 20)
	[DllImport (LibraryName)]
	internal static extern int clang_Type_getNumTemplateArguments (CXType @T);

	// function clang_Type_getTemplateArgumentAsType - Index.h (3824, 23)
	[DllImport (LibraryName)]
	internal static extern CXType clang_Type_getTemplateArgumentAsType (CXType @T, uint @i);

	// function clang_Type_getCXXRefQualifier - Index.h (3832, 40)
	[DllImport (LibraryName)]
	internal static extern CXRefQualifierKind clang_Type_getCXXRefQualifier (CXType @T);

	// function clang_Cursor_isBitField - Index.h (3838, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_Cursor_isBitField (CXCursor @C);

	// function clang_isVirtualBase - Index.h (3844, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_isVirtualBase (CXCursor _0);

	// function clang_getCXXAccessSpecifier - Index.h (3864, 43)
	[DllImport (LibraryName)]
	internal static extern CX_CXXAccessSpecifier clang_getCXXAccessSpecifier (CXCursor _0);

	// function clang_Cursor_getStorageClass - Index.h (3887, 37)
	[DllImport (LibraryName)]
	internal static extern CX_StorageClass clang_Cursor_getStorageClass (CXCursor _0);

	// function clang_getNumOverloadedDecls - Index.h (3898, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_getNumOverloadedDecls (CXCursor @cursor);

	// function clang_getOverloadedDecl - Index.h (3914, 25)
	[DllImport (LibraryName)]
	internal static extern CXCursor clang_getOverloadedDecl (CXCursor @cursor, uint @index);

	// function clang_getIBOutletCollectionType - Index.h (3932, 23)
	[DllImport (LibraryName)]
	internal static extern CXType clang_getIBOutletCollectionType (CXCursor _0);

	// function clang_visitChildren - Index.h (4009, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_visitChildren (CXCursor @parent, CXCursorVisitor @visitor, CXClientData @client_data);

	// function clang_getCursorUSR - Index.h (4060, 25)
	[DllImport (LibraryName)]
	internal static extern CXString clang_getCursorUSR (CXCursor _0);

	// function clang_constructUSR_ObjCClass - Index.h (4065, 25)
	[DllImport (LibraryName)]
	internal static extern CXString clang_constructUSR_ObjCClass ([CTypeDetails ("Pointer<byte>")]string @class_name);

	// function clang_constructUSR_ObjCCategory - Index.h (4071, 3)
	[DllImport (LibraryName)]
	internal static extern CXString clang_constructUSR_ObjCCategory ([CTypeDetails ("Pointer<byte>")]string @class_name, [CTypeDetails ("Pointer<byte>")]string @category_name);

	// function clang_constructUSR_ObjCProtocol - Index.h (4078, 3)
	[DllImport (LibraryName)]
	internal static extern CXString clang_constructUSR_ObjCProtocol ([CTypeDetails ("Pointer<byte>")]string @protocol_name);

	// function clang_constructUSR_ObjCIvar - Index.h (4084, 25)
	[DllImport (LibraryName)]
	internal static extern CXString clang_constructUSR_ObjCIvar ([CTypeDetails ("Pointer<byte>")]string @name, CXString @classUSR);

	// function clang_constructUSR_ObjCMethod - Index.h (4091, 25)
	[DllImport (LibraryName)]
	internal static extern CXString clang_constructUSR_ObjCMethod ([CTypeDetails ("Pointer<byte>")]string @name, uint @isInstanceMethod, CXString @classUSR);

	// function clang_constructUSR_ObjCProperty - Index.h (4099, 25)
	[DllImport (LibraryName)]
	internal static extern CXString clang_constructUSR_ObjCProperty ([CTypeDetails ("Pointer<byte>")]string @property, CXString @classUSR);

	// function clang_getCursorSpelling - Index.h (4105, 25)
	[DllImport (LibraryName)]
	internal static extern CXString clang_getCursorSpelling (CXCursor _0);

	// function clang_Cursor_getSpellingNameRange - Index.h (4118, 30)
	[DllImport (LibraryName)]
	internal static extern CXSourceRange clang_Cursor_getSpellingNameRange (CXCursor _0, uint @pieceIndex, uint @options);

	// function clang_PrintingPolicy_getProperty - Index.h (4168, 1)
	[DllImport (LibraryName)]
	internal static extern uint clang_PrintingPolicy_getProperty (CXPrintingPolicy @Policy, CXPrintingPolicyProperty @Property);

	// function clang_PrintingPolicy_setProperty - Index.h (4174, 21)
	[DllImport (LibraryName)]
	internal static extern void clang_PrintingPolicy_setProperty (CXPrintingPolicy @Policy, CXPrintingPolicyProperty @Property, uint @Value);

	// function clang_getCursorPrintingPolicy - Index.h (4184, 33)
	[DllImport (LibraryName)]
	internal static extern CXPrintingPolicy clang_getCursorPrintingPolicy (CXCursor _0);

	// function clang_PrintingPolicy_dispose - Index.h (4189, 21)
	[DllImport (LibraryName)]
	internal static extern void clang_PrintingPolicy_dispose (CXPrintingPolicy @Policy);

	// function clang_getCursorPrettyPrinted - Index.h (4202, 25)
	[DllImport (LibraryName)]
	internal static extern CXString clang_getCursorPrettyPrinted (CXCursor @Cursor, CXPrintingPolicy @Policy);

	// function clang_getCursorDisplayName - Index.h (4212, 25)
	[DllImport (LibraryName)]
	internal static extern CXString clang_getCursorDisplayName (CXCursor _0);

	// function clang_getCursorReferenced - Index.h (4224, 25)
	[DllImport (LibraryName)]
	internal static extern CXCursor clang_getCursorReferenced (CXCursor _0);

	// function clang_getCursorDefinition - Index.h (4254, 25)
	[DllImport (LibraryName)]
	internal static extern CXCursor clang_getCursorDefinition (CXCursor _0);

	// function clang_isCursorDefinition - Index.h (4260, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_isCursorDefinition (CXCursor _0);

	// function clang_getCanonicalCursor - Index.h (4286, 25)
	[DllImport (LibraryName)]
	internal static extern CXCursor clang_getCanonicalCursor (CXCursor _0);

	// function clang_Cursor_getObjCSelectorIndex - Index.h (4299, 20)
	[DllImport (LibraryName)]
	internal static extern int clang_Cursor_getObjCSelectorIndex (CXCursor _0);

	// function clang_Cursor_isDynamicCall - Index.h (4312, 20)
	[DllImport (LibraryName)]
	internal static extern int clang_Cursor_isDynamicCall (CXCursor @C);

	// function clang_Cursor_getReceiverType - Index.h (4318, 23)
	[DllImport (LibraryName)]
	internal static extern CXType clang_Cursor_getReceiverType (CXCursor @C);

	// function clang_Cursor_getObjCPropertyAttributes - Index.h (4347, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_Cursor_getObjCPropertyAttributes (CXCursor @C, uint @reserved);

	// function clang_Cursor_getObjCDeclQualifiers - Index.h (4370, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_Cursor_getObjCDeclQualifiers (CXCursor @C);

	// function clang_Cursor_isObjCOptional - Index.h (4377, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_Cursor_isObjCOptional (CXCursor @C);

	// function clang_Cursor_isVariadic - Index.h (4382, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_Cursor_isVariadic (CXCursor @C);

	// function clang_Cursor_isExternalSymbol - Index.h (4397, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_Cursor_isExternalSymbol (CXCursor @C, [CTypeDetails ("Pointer<CXString>")]Pointer<CXString> @language, [CTypeDetails ("Pointer<CXString>")]Pointer<CXString> @definedIn, [CTypeDetails ("Pointer<uint>")]Pointer<uint> @isGenerated);

	// function clang_Cursor_getCommentRange - Index.h (4406, 30)
	[DllImport (LibraryName)]
	internal static extern CXSourceRange clang_Cursor_getCommentRange (CXCursor @C);

	// function clang_Cursor_getRawCommentText - Index.h (4412, 25)
	[DllImport (LibraryName)]
	internal static extern CXString clang_Cursor_getRawCommentText (CXCursor @C);

	// function clang_Cursor_getBriefCommentText - Index.h (4419, 25)
	[DllImport (LibraryName)]
	internal static extern CXString clang_Cursor_getBriefCommentText (CXCursor @C);

	// function clang_Cursor_getMangling - Index.h (4433, 25)
	[DllImport (LibraryName)]
	internal static extern CXString clang_Cursor_getMangling (CXCursor _0);

	// function clang_Cursor_getCXXManglings - Index.h (4439, 29)
	[DllImport (LibraryName)]
	internal static extern Pointer<CXStringSet> clang_Cursor_getCXXManglings (CXCursor _0);

	// function clang_Cursor_getObjCManglings - Index.h (4445, 29)
	[DllImport (LibraryName)]
	internal static extern Pointer<CXStringSet> clang_Cursor_getObjCManglings (CXCursor _0);

	// function clang_Cursor_getModule - Index.h (4464, 25)
	[DllImport (LibraryName)]
	internal static extern CXModule clang_Cursor_getModule (CXCursor @C);

	// function clang_getModuleForFile - Index.h (4470, 25)
	[DllImport (LibraryName)]
	internal static extern CXModule clang_getModuleForFile (CXTranslationUnit _0, CXFile _1);

	// function clang_Module_getASTFile - Index.h (4477, 23)
	[DllImport (LibraryName)]
	internal static extern CXFile clang_Module_getASTFile (CXModule @Module);

	// function clang_Module_getParent - Index.h (4485, 25)
	[DllImport (LibraryName)]
	internal static extern CXModule clang_Module_getParent (CXModule @Module);

	// function clang_Module_getName - Index.h (4493, 25)
	[DllImport (LibraryName)]
	internal static extern CXString clang_Module_getName (CXModule @Module);

	// function clang_Module_getFullName - Index.h (4500, 25)
	[DllImport (LibraryName)]
	internal static extern CXString clang_Module_getFullName (CXModule @Module);

	// function clang_Module_isSystem - Index.h (4507, 20)
	[DllImport (LibraryName)]
	internal static extern int clang_Module_isSystem (CXModule @Module);

	// function clang_Module_getNumTopLevelHeaders - Index.h (4514, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_Module_getNumTopLevelHeaders (CXTranslationUnit _0, CXModule @Module);

	// function clang_Module_getTopLevelHeader - Index.h (4525, 8)
	[DllImport (LibraryName)]
	internal static extern CXFile clang_Module_getTopLevelHeader (CXTranslationUnit _0, CXModule @Module, uint @Index);

	// function clang_CXXConstructor_isConvertingConstructor - Index.h (4544, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_CXXConstructor_isConvertingConstructor (CXCursor @C);

	// function clang_CXXConstructor_isCopyConstructor - Index.h (4549, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_CXXConstructor_isCopyConstructor (CXCursor @C);

	// function clang_CXXConstructor_isDefaultConstructor - Index.h (4554, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_CXXConstructor_isDefaultConstructor (CXCursor @C);

	// function clang_CXXConstructor_isMoveConstructor - Index.h (4559, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_CXXConstructor_isMoveConstructor (CXCursor @C);

	// function clang_CXXField_isMutable - Index.h (4564, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_CXXField_isMutable (CXCursor @C);

	// function clang_CXXMethod_isDefaulted - Index.h (4569, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_CXXMethod_isDefaulted (CXCursor @C);

	// function clang_CXXMethod_isPureVirtual - Index.h (4575, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_CXXMethod_isPureVirtual (CXCursor @C);

	// function clang_CXXMethod_isStatic - Index.h (4581, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_CXXMethod_isStatic (CXCursor @C);

	// function clang_CXXMethod_isVirtual - Index.h (4588, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_CXXMethod_isVirtual (CXCursor @C);

	// function clang_CXXRecord_isAbstract - Index.h (4594, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_CXXRecord_isAbstract (CXCursor @C);

	// function clang_EnumDecl_isScoped - Index.h (4599, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_EnumDecl_isScoped (CXCursor @C);

	// function clang_CXXMethod_isConst - Index.h (4605, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_CXXMethod_isConst (CXCursor @C);

	// function clang_getTemplateCursorKind - Index.h (4624, 34)
	[DllImport (LibraryName)]
	internal static extern CXCursorKind clang_getTemplateCursorKind (CXCursor @C);

	// function clang_getSpecializedCursorTemplate - Index.h (4654, 25)
	[DllImport (LibraryName)]
	internal static extern CXCursor clang_getSpecializedCursorTemplate (CXCursor @C);

	// function clang_getCursorReferenceNameRange - Index.h (4674, 30)
	[DllImport (LibraryName)]
	internal static extern CXSourceRange clang_getCursorReferenceNameRange (CXCursor @C, uint @NameFlags, uint @PieceIndex);

	// function clang_getToken - Index.h (4767, 25)
	[DllImport (LibraryName)]
	internal static extern Pointer<CXToken> clang_getToken (CXTranslationUnit @TU, CXSourceLocation @Location);

	// function clang_getTokenKind - Index.h (4773, 28)
	[DllImport (LibraryName)]
	internal static extern CXTokenKind clang_getTokenKind (CXToken _0);

	// function clang_getTokenSpelling - Index.h (4781, 25)
	[DllImport (LibraryName)]
	internal static extern CXString clang_getTokenSpelling (CXTranslationUnit _0, CXToken _1);

	// function clang_getTokenLocation - Index.h (4786, 33)
	[DllImport (LibraryName)]
	internal static extern CXSourceLocation clang_getTokenLocation (CXTranslationUnit _0, CXToken _1);

	// function clang_getTokenExtent - Index.h (4792, 30)
	[DllImport (LibraryName)]
	internal static extern CXSourceRange clang_getTokenExtent (CXTranslationUnit _0, CXToken _1);

	// function clang_tokenize - Index.h (4811, 21)
	[DllImport (LibraryName)]
	internal static extern void clang_tokenize (CXTranslationUnit @TU, CXSourceRange @Range, [CTypeDetails ("Pointer<Pointer<CXToken>>")]Pointer<Pointer<CXToken>> @Tokens, [CTypeDetails ("Pointer<uint>")]Pointer<uint> @NumTokens);

	// function clang_annotateTokens - Index.h (4844, 21)
	[DllImport (LibraryName)]
	internal static extern void clang_annotateTokens (CXTranslationUnit @TU, [CTypeDetails ("Pointer<CXToken>")]Pointer<CXToken> @Tokens, uint @NumTokens, [CTypeDetails ("Pointer<CXCursor>")]Pointer<CXCursor> @Cursors);

	// function clang_disposeTokens - Index.h (4851, 21)
	[DllImport (LibraryName)]
	internal static extern void clang_disposeTokens (CXTranslationUnit @TU, [CTypeDetails ("Pointer<CXToken>")]Pointer<CXToken> @Tokens, uint @NumTokens);

	// function clang_getCursorKindSpelling - Index.h (4868, 25)
	[DllImport (LibraryName)]
	internal static extern CXString clang_getCursorKindSpelling (CXCursorKind @Kind);

	// function clang_getDefinitionSpellingAndExtent - Index.h (4869, 21)
	[DllImport (LibraryName)]
	internal static extern void clang_getDefinitionSpellingAndExtent (CXCursor _0, [CTypeDetails ("Pointer<string>")]Pointer<string> @startBuf, [CTypeDetails ("Pointer<string>")]Pointer<string> @endBuf, [CTypeDetails ("Pointer<uint>")]Pointer<uint> @startLine, [CTypeDetails ("Pointer<uint>")]Pointer<uint> @startColumn, [CTypeDetails ("Pointer<uint>")]Pointer<uint> @endLine, [CTypeDetails ("Pointer<uint>")]Pointer<uint> @endColumn);

	// function clang_enableStackTraces - Index.h (4876, 21)
	[DllImport (LibraryName)]
	internal static extern void clang_enableStackTraces ();

	// function clang_executeOnThread - Index.h (4877, 21)
	[DllImport (LibraryName)]
	internal static extern void clang_executeOnThread ([CTypeDetails ("Pointer<void (void *)>")]delegate13 @fn, [CTypeDetails ("Pointer<void>")]System.IntPtr @user_data, uint @stack_size);

	// function clang_getCompletionChunkKind - Index.h (5115, 1)
	[DllImport (LibraryName)]
	internal static extern CXCompletionChunkKind clang_getCompletionChunkKind (CXCompletionString @completion_string, uint @chunk_number);

	// function clang_getCompletionChunkText - Index.h (5129, 1)
	[DllImport (LibraryName)]
	internal static extern CXString clang_getCompletionChunkText (CXCompletionString @completion_string, uint @chunk_number);

	// function clang_getCompletionChunkCompletionString - Index.h (5144, 1)
	[DllImport (LibraryName)]
	internal static extern CXCompletionString clang_getCompletionChunkCompletionString (CXCompletionString @completion_string, uint @chunk_number);

	// function clang_getNumCompletionChunks - Index.h (5151, 1)
	[DllImport (LibraryName)]
	internal static extern uint clang_getNumCompletionChunks (CXCompletionString @completion_string);

	// function clang_getCompletionPriority - Index.h (5166, 1)
	[DllImport (LibraryName)]
	internal static extern uint clang_getCompletionPriority (CXCompletionString @completion_string);

	// function clang_getCompletionAvailability - Index.h (5177, 1)
	[DllImport (LibraryName)]
	internal static extern CXAvailabilityKind clang_getCompletionAvailability (CXCompletionString @completion_string);

	// function clang_getCompletionNumAnnotations - Index.h (5189, 1)
	[DllImport (LibraryName)]
	internal static extern uint clang_getCompletionNumAnnotations (CXCompletionString @completion_string);

	// function clang_getCompletionAnnotation - Index.h (5203, 1)
	[DllImport (LibraryName)]
	internal static extern CXString clang_getCompletionAnnotation (CXCompletionString @completion_string, uint @annotation_number);

	// function clang_getCompletionParent - Index.h (5223, 1)
	[DllImport (LibraryName)]
	internal static extern CXString clang_getCompletionParent (CXCompletionString @completion_string, [CTypeDetails ("Pointer<CXCursorKind>")]Pointer<CXCursorKind> @kind);

	// function clang_getCompletionBriefComment - Index.h (5231, 1)
	[DllImport (LibraryName)]
	internal static extern CXString clang_getCompletionBriefComment (CXCompletionString @completion_string);

	// function clang_getCursorCompletionString - Index.h (5243, 1)
	[DllImport (LibraryName)]
	internal static extern CXCompletionString clang_getCursorCompletionString (CXCursor @cursor);

	// function clang_getCompletionNumFixIts - Index.h (5279, 1)
	[DllImport (LibraryName)]
	internal static extern uint clang_getCompletionNumFixIts ([CTypeDetails ("Pointer<CXCodeCompleteResults>")]Pointer<CXCodeCompleteResults> @results, uint @completion_index);

	// function clang_getCompletionFixIt - Index.h (5325, 25)
	[DllImport (LibraryName)]
	internal static extern CXString clang_getCompletionFixIt ([CTypeDetails ("Pointer<CXCodeCompleteResults>")]Pointer<CXCodeCompleteResults> @results, uint @completion_index, uint @fixit_index, [CTypeDetails ("Pointer<CXSourceRange>")]Pointer<CXSourceRange> @replacement_range);

	// function clang_defaultCodeCompleteOptions - Index.h (5504, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_defaultCodeCompleteOptions ();

	// function clang_codeCompleteAt - Index.h (5575, 24)
	[DllImport (LibraryName)]
	internal static extern Pointer<CXCodeCompleteResults> clang_codeCompleteAt (CXTranslationUnit @TU, [CTypeDetails ("Pointer<byte>")]string @complete_filename, uint @complete_line, uint @complete_column, [CTypeDetails ("Pointer<CXUnsavedFile>")]Pointer<CXUnsavedFile> @unsaved_files, uint @num_unsaved_files, uint @options);

	// function clang_sortCodeCompletionResults - Index.h (5591, 6)
	[DllImport (LibraryName)]
	internal static extern void clang_sortCodeCompletionResults ([CTypeDetails ("Pointer<CXCompletionResult>")]Pointer<CXCompletionResult> @Results, uint @NumResults);

	// function clang_disposeCodeCompleteResults - Index.h (5598, 6)
	[DllImport (LibraryName)]
	internal static extern void clang_disposeCodeCompleteResults ([CTypeDetails ("Pointer<CXCodeCompleteResults>")]Pointer<CXCodeCompleteResults> @Results);

	// function clang_codeCompleteGetNumDiagnostics - Index.h (5605, 10)
	[DllImport (LibraryName)]
	internal static extern uint clang_codeCompleteGetNumDiagnostics ([CTypeDetails ("Pointer<CXCodeCompleteResults>")]Pointer<CXCodeCompleteResults> @Results);

	// function clang_codeCompleteGetDiagnostic - Index.h (5617, 14)
	[DllImport (LibraryName)]
	internal static extern CXDiagnostic clang_codeCompleteGetDiagnostic ([CTypeDetails ("Pointer<CXCodeCompleteResults>")]Pointer<CXCodeCompleteResults> @Results, uint @Index);

	// function clang_codeCompleteGetContexts - Index.h (5630, 20)
	[DllImport (LibraryName)]
	internal static extern ulong clang_codeCompleteGetContexts ([CTypeDetails ("Pointer<CXCodeCompleteResults>")]Pointer<CXCodeCompleteResults> @Results);

	// function clang_codeCompleteGetContainerKind - Index.h (5650, 19)
	[DllImport (LibraryName)]
	internal static extern CXCursorKind clang_codeCompleteGetContainerKind ([CTypeDetails ("Pointer<CXCodeCompleteResults>")]Pointer<CXCodeCompleteResults> @Results, [CTypeDetails ("Pointer<uint>")]Pointer<uint> @IsIncomplete);

	// function clang_codeCompleteGetContainerUSR - Index.h (5664, 10)
	[DllImport (LibraryName)]
	internal static extern CXString clang_codeCompleteGetContainerUSR ([CTypeDetails ("Pointer<CXCodeCompleteResults>")]Pointer<CXCodeCompleteResults> @Results);

	// function clang_codeCompleteGetObjCSelector - Index.h (5678, 10)
	[DllImport (LibraryName)]
	internal static extern CXString clang_codeCompleteGetObjCSelector ([CTypeDetails ("Pointer<CXCodeCompleteResults>")]Pointer<CXCodeCompleteResults> @Results);

	// function clang_getClangVersion - Index.h (5694, 25)
	[DllImport (LibraryName)]
	internal static extern CXString clang_getClangVersion ();

	// function clang_toggleCrashRecovery - Index.h (5702, 21)
	[DllImport (LibraryName)]
	internal static extern void clang_toggleCrashRecovery (uint @isEnabled);

	// function clang_getInclusions - Index.h (5726, 21)
	[DllImport (LibraryName)]
	internal static extern void clang_getInclusions (CXTranslationUnit @tu, CXInclusionVisitor @visitor, CXClientData @client_data);

	// function clang_Cursor_Evaluate - Index.h (5752, 29)
	[DllImport (LibraryName)]
	internal static extern CXEvalResult clang_Cursor_Evaluate (CXCursor @C);

	// function clang_EvalResult_getKind - Index.h (5757, 33)
	[DllImport (LibraryName)]
	internal static extern CXEvalResultKind clang_EvalResult_getKind (CXEvalResult @E);

	// function clang_EvalResult_getAsInt - Index.h (5763, 20)
	[DllImport (LibraryName)]
	internal static extern int clang_EvalResult_getAsInt (CXEvalResult @E);

	// function clang_EvalResult_getAsLongLong - Index.h (5770, 26)
	[DllImport (LibraryName)]
	internal static extern long clang_EvalResult_getAsLongLong (CXEvalResult @E);

	// function clang_EvalResult_isUnsignedInt - Index.h (5776, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_EvalResult_isUnsignedInt (CXEvalResult @E);

	// function clang_EvalResult_getAsUnsigned - Index.h (5782, 35)
	[DllImport (LibraryName)]
	internal static extern ulong clang_EvalResult_getAsUnsigned (CXEvalResult @E);

	// function clang_EvalResult_getAsDouble - Index.h (5788, 23)
	[DllImport (LibraryName)]
	internal static extern double clang_EvalResult_getAsDouble (CXEvalResult @E);

	// function clang_EvalResult_getAsStr - Index.h (5796, 28)
	[DllImport (LibraryName)]
	internal static extern string clang_EvalResult_getAsStr (CXEvalResult @E);

	// function clang_EvalResult_dispose - Index.h (5801, 21)
	[DllImport (LibraryName)]
	internal static extern void clang_EvalResult_dispose (CXEvalResult @E);

	// function clang_getRemappings - Index.h (5824, 28)
	[DllImport (LibraryName)]
	internal static extern CXRemapping clang_getRemappings ([CTypeDetails ("Pointer<byte>")]string @path);

	// function clang_getRemappingsFromFileList - Index.h (5837, 13)
	[DllImport (LibraryName)]
	internal static extern CXRemapping clang_getRemappingsFromFileList ([CTypeDetails ("Pointer<string>")]Pointer<string> @filePaths, uint @numFiles);

	// function clang_remap_getNumFiles - Index.h (5843, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_remap_getNumFiles (CXRemapping _0);

	// function clang_remap_getFilenames - Index.h (5853, 21)
	[DllImport (LibraryName)]
	internal static extern void clang_remap_getFilenames (CXRemapping _0, uint @index, [CTypeDetails ("Pointer<CXString>")]Pointer<CXString> @original, [CTypeDetails ("Pointer<CXString>")]Pointer<CXString> @transformed);

	// function clang_remap_dispose - Index.h (5859, 21)
	[DllImport (LibraryName)]
	internal static extern void clang_remap_dispose (CXRemapping _0);

	// function clang_findReferencesInFile - Index.h (5911, 25)
	[DllImport (LibraryName)]
	internal static extern CXResult clang_findReferencesInFile (CXCursor @cursor, CXFile @file, CXCursorAndRangeVisitor @visitor);

	// function clang_findIncludesInFile - Index.h (5926, 25)
	[DllImport (LibraryName)]
	internal static extern CXResult clang_findIncludesInFile (CXTranslationUnit @TU, CXFile @file, CXCursorAndRangeVisitor @visitor);

	// function clang_index_isEntityObjCContainerKind - Index.h (6332, 20)
	[DllImport (LibraryName)]
	internal static extern int clang_index_isEntityObjCContainerKind (CXIdxEntityKind _0);

	// function clang_index_getObjCContainerDeclInfo - Index.h (6334, 1)
	[DllImport (LibraryName)]
	internal static extern Pointer<CXIdxObjCContainerDeclInfo> clang_index_getObjCContainerDeclInfo ([CTypeDetails ("Pointer<CXIdxDeclInfo>")]Pointer<CXIdxDeclInfo> _0);

	// function clang_index_getObjCInterfaceDeclInfo - Index.h (6337, 1)
	[DllImport (LibraryName)]
	internal static extern Pointer<CXIdxObjCInterfaceDeclInfo> clang_index_getObjCInterfaceDeclInfo ([CTypeDetails ("Pointer<CXIdxDeclInfo>")]Pointer<CXIdxDeclInfo> _0);

	// function clang_index_getObjCCategoryDeclInfo - Index.h (6341, 1)
	[DllImport (LibraryName)]
	internal static extern Pointer<CXIdxObjCCategoryDeclInfo> clang_index_getObjCCategoryDeclInfo ([CTypeDetails ("Pointer<CXIdxDeclInfo>")]Pointer<CXIdxDeclInfo> _0);

	// function clang_index_getObjCProtocolRefListInfo - Index.h (6344, 1)
	[DllImport (LibraryName)]
	internal static extern Pointer<CXIdxObjCProtocolRefListInfo> clang_index_getObjCProtocolRefListInfo ([CTypeDetails ("Pointer<CXIdxDeclInfo>")]Pointer<CXIdxDeclInfo> _0);

	// function clang_index_getObjCPropertyDeclInfo - Index.h (6347, 1)
	[DllImport (LibraryName)]
	internal static extern Pointer<CXIdxObjCPropertyDeclInfo> clang_index_getObjCPropertyDeclInfo ([CTypeDetails ("Pointer<CXIdxDeclInfo>")]Pointer<CXIdxDeclInfo> _0);

	// function clang_index_getIBOutletCollectionAttrInfo - Index.h (6350, 1)
	[DllImport (LibraryName)]
	internal static extern Pointer<CXIdxIBOutletCollectionAttrInfo> clang_index_getIBOutletCollectionAttrInfo ([CTypeDetails ("Pointer<CXIdxAttrInfo>")]Pointer<CXIdxAttrInfo> _0);

	// function clang_index_getCXXClassDeclInfo - Index.h (6353, 1)
	[DllImport (LibraryName)]
	internal static extern Pointer<CXIdxCXXClassDeclInfo> clang_index_getCXXClassDeclInfo ([CTypeDetails ("Pointer<CXIdxDeclInfo>")]Pointer<CXIdxDeclInfo> _0);

	// function clang_index_getClientContainer - Index.h (6360, 1)
	[DllImport (LibraryName)]
	internal static extern CXIdxClientContainer clang_index_getClientContainer ([CTypeDetails ("Pointer<CXIdxContainerInfo>")]Pointer<CXIdxContainerInfo> _0);

	// function clang_index_setClientContainer - Index.h (6367, 1)
	[DllImport (LibraryName)]
	internal static extern void clang_index_setClientContainer ([CTypeDetails ("Pointer<CXIdxContainerInfo>")]Pointer<CXIdxContainerInfo> _0, CXIdxClientContainer _1);

	// function clang_index_getClientEntity - Index.h (6373, 1)
	[DllImport (LibraryName)]
	internal static extern CXIdxClientEntity clang_index_getClientEntity ([CTypeDetails ("Pointer<CXIdxEntityInfo>")]Pointer<CXIdxEntityInfo> _0);

	// function clang_index_setClientEntity - Index.h (6379, 1)
	[DllImport (LibraryName)]
	internal static extern void clang_index_setClientEntity ([CTypeDetails ("Pointer<CXIdxEntityInfo>")]Pointer<CXIdxEntityInfo> _0, CXIdxClientEntity _1);

	// function clang_IndexAction_create - Index.h (6393, 30)
	[DllImport (LibraryName)]
	internal static extern CXIndexAction clang_IndexAction_create (CXIndex @CIdx);

	// function clang_IndexAction_dispose - Index.h (6401, 21)
	[DllImport (LibraryName)]
	internal static extern void clang_IndexAction_dispose (CXIndexAction _0);

	// function clang_indexSourceFile - Index.h (6467, 20)
	[DllImport (LibraryName)]
	internal static extern int clang_indexSourceFile (CXIndexAction _0, CXClientData @client_data, [CTypeDetails ("Pointer<IndexerCallbacks>")]Pointer<IndexerCallbacks> @index_callbacks, uint @index_callbacks_size, uint @index_options, [CTypeDetails ("Pointer<byte>")]string @source_filename, [CTypeDetails ("Pointer<string>")]Pointer<string> @command_line_args, int @num_command_line_args, [CTypeDetails ("Pointer<CXUnsavedFile>")]Pointer<CXUnsavedFile> @unsaved_files, uint @num_unsaved_files, [CTypeDetails ("Pointer<CXTranslationUnit>")]Pointer<CXTranslationUnit> @out_TU, uint @TU_options);

	// function clang_indexSourceFileFullArgv - Index.h (6485, 20)
	[DllImport (LibraryName)]
	internal static extern int clang_indexSourceFileFullArgv (CXIndexAction _0, CXClientData @client_data, [CTypeDetails ("Pointer<IndexerCallbacks>")]Pointer<IndexerCallbacks> @index_callbacks, uint @index_callbacks_size, uint @index_options, [CTypeDetails ("Pointer<byte>")]string @source_filename, [CTypeDetails ("Pointer<string>")]Pointer<string> @command_line_args, int @num_command_line_args, [CTypeDetails ("Pointer<CXUnsavedFile>")]Pointer<CXUnsavedFile> @unsaved_files, uint @num_unsaved_files, [CTypeDetails ("Pointer<CXTranslationUnit>")]Pointer<CXTranslationUnit> @out_TU, uint @TU_options);

	// function clang_indexTranslationUnit - Index.h (6508, 20)
	[DllImport (LibraryName)]
	internal static extern int clang_indexTranslationUnit (CXIndexAction _0, CXClientData @client_data, [CTypeDetails ("Pointer<IndexerCallbacks>")]Pointer<IndexerCallbacks> @index_callbacks, uint @index_callbacks_size, uint @index_options, CXTranslationUnit _5);

	// function clang_indexLoc_getFileLocation - Index.h (6523, 21)
	[DllImport (LibraryName)]
	internal static extern void clang_indexLoc_getFileLocation (CXIdxLoc @loc, [CTypeDetails ("Pointer<CXIdxClientFile>")]Pointer<CXIdxClientFile> @indexFile, [CTypeDetails ("Pointer<CXFile>")]Pointer<CXFile> @file, [CTypeDetails ("Pointer<uint>")]Pointer<uint> @line, [CTypeDetails ("Pointer<uint>")]Pointer<uint> @column, [CTypeDetails ("Pointer<uint>")]Pointer<uint> @offset);

	// function clang_indexLoc_getCXSourceLocation - Index.h (6534, 18)
	[DllImport (LibraryName)]
	internal static extern CXSourceLocation clang_indexLoc_getCXSourceLocation (CXIdxLoc @loc);

	// function clang_Type_visitFields - Index.h (6569, 25)
	[DllImport (LibraryName)]
	internal static extern uint clang_Type_visitFields (CXType @T, CXFieldVisitor @visitor, CXClientData @client_data);

}

internal class Delegates
{
public delegate NClang.Natives.CXChildVisitResult CXCursorVisitor (NClang.Natives.CXCursor p0, NClang.Natives.CXCursor p1, System.IntPtr p2);
public delegate void delegate1 (System.IntPtr p0);
public delegate void CXInclusionVisitor (System.IntPtr p0, NClang.Natives.Pointer<NClang.Natives.CXSourceLocation> p1, System.UInt32 p2, System.IntPtr p3);
public delegate CXVisitorResult delegate3 (System.IntPtr p0, CXCursor p1, CXSourceRange p2);
public delegate int delegate4 (CXClientData p0, System.IntPtr p1);
public delegate void delegate5 (CXClientData p0, CXDiagnosticSet p1, System.IntPtr p2);
public delegate CXIdxClientFile delegate6 (CXClientData p0, CXFile p1, System.IntPtr p2);
public delegate CXIdxClientFile delegate7 (CXClientData p0, Pointer<CXIdxIncludedFileInfo> p1);
public delegate CXIdxClientASTFile delegate8 (CXClientData p0, Pointer<CXIdxImportedASTFileInfo> p1);
public delegate CXIdxClientContainer delegate9 (CXClientData p0, System.IntPtr p1);
public delegate void delegate10 (CXClientData p0, Pointer<CXIdxDeclInfo> p1);
public delegate void delegate11 (CXClientData p0, Pointer<CXIdxEntityRefInfo> p1);
public delegate NClang.Natives.CXVisitorResult CXFieldVisitor (NClang.Natives.CXCursor p0, System.IntPtr p1);
public delegate void delegate13 (System.IntPtr p0);
public delegate CXVisitorResult delegate14 (System.IntPtr p0, CXCursor p1, CXSourceRange p2);
public delegate int delegate15 (CXClientData p0, System.IntPtr p1);
public delegate void delegate16 (CXClientData p0, CXDiagnosticSet p1, System.IntPtr p2);
public delegate CXIdxClientFile delegate17 (CXClientData p0, CXFile p1, System.IntPtr p2);
public delegate CXIdxClientFile delegate18 (CXClientData p0, Pointer<CXIdxIncludedFileInfo> p1);
public delegate CXIdxClientASTFile delegate19 (CXClientData p0, Pointer<CXIdxImportedASTFileInfo> p1);
public delegate CXIdxClientContainer delegate20 (CXClientData p0, System.IntPtr p1);
public delegate void delegate21 (CXClientData p0, Pointer<CXIdxDeclInfo> p1);
public delegate void delegate22 (CXClientData p0, Pointer<CXIdxEntityRefInfo> p1);
}

internal struct Pointer<T>
{
	public IntPtr Handle;
	public static implicit operator IntPtr (Pointer<T> value) { return value.Handle; }
	public static implicit operator Pointer<T> (IntPtr value) { return new Pointer<T> (value); }

	public Pointer (IntPtr handle)
	{
		Handle = handle;
	}

	public override bool Equals (object obj)
	{
		return obj is Pointer<T> && this == (Pointer<T>) obj;
	}

	public override int GetHashCode ()
	{
		return (int) Handle;
	}

	public static bool operator == (Pointer<T> p1, Pointer<T> p2)
	{
		return p1.Handle == p2.Handle;
	}

	public static bool operator != (Pointer<T> p1, Pointer<T> p2)
	{
		return p1.Handle != p2.Handle;
	}
}
internal struct ArrayOf<T> {}
internal struct ConstArrayOf<T> {}
internal class CTypeDetailsAttribute : Attribute
{
	public CTypeDetailsAttribute (string value)
	{
		Value = value;
	}

	public string Value { get; set; }
}

}
